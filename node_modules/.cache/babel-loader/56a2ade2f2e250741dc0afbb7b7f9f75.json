{"ast":null,"code":"import { profileApi } from '../api/api.js';\nimport { stopSubmit } from 'redux-form';\nconst ADD_POST = 'ADD-POST';\nconst ADD_NEW_TEXT = 'ADD-NEW-TEXT';\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\nconst SET_USER_POSTS = 'SET-USER-POSTS';\nconst SET_LIKES_POST = 'SET_LIKES_POST';\nconst DELETE_POST = 'DELETE-POST';\nconst UPDATE_PROFILE = 'UPDATE-PROFILE';\nlet initial_state = {\n  posts: [],\n  profile: null\n};\n\nlet profileReducer = (state = initial_state, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      return { ...state,\n        posts: state.posts.concat(action.post)\n      };\n\n    case ADD_NEW_TEXT:\n      return addNewText(state, action.text);\n\n    case SET_USER_PROFILE:\n      return setUserProfile(state, action.profile);\n\n    case SET_USER_POSTS:\n      return { ...state,\n        //...state.profile,\n        posts: action.posts\n      };\n\n    case SET_LIKES_POST:\n      let posts = state.posts.map(post => {\n        if (post.id != action.post.id) {\n          return post;\n        } else {\n          return action.post;\n        }\n\n        ;\n      });\n      return { ...state,\n        posts\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => {\n          return post.id != action.post.id;\n        })\n      };\n\n    case UPDATE_PROFILE:\n      return { ...state,\n        profile: { ...state.profile\n        }\n      };\n  }\n\n  ;\n  return state;\n};\n\nfunction addNewText(state, text) {\n  let state_copy = { ...state\n  };\n  state_copy.textNewPost = text;\n  return state_copy;\n}\n\n;\n\nfunction setUserProfile(state, profile) {\n  let state_copy = { ...state\n  };\n  state_copy.profile = profile;\n  return state_copy;\n}\n\n;\nexport const getProfile = options => dispatch => {\n  profileApi.getProfile(options).then(data => {\n    if (data.data.result_code === 0) {\n      console.log('profile object!!!' + ' ');\n      console.log(data.data);\n      dispatch(setUserProfileActionCreator(data.data));\n    }\n  });\n};\nexport const getPosts = options => dispatch => {\n  profileApi.getPosts(options).then(data => {\n    if (data.result_code === 0) {\n      dispatch(setUserPosts(data.posts));\n      console.log(data);\n    }\n  });\n};\nexport const createPost = options => dispatch => {\n  profileApi.createPost(options).then(data => {\n    if (data.result_code === 0) {\n      dispatch(addPost(data.post));\n    } else {\n      dispatch(stopSubmit('create_post', {\n        _error: data.message\n      }));\n    }\n\n    ;\n  });\n};\nexport const likedPost = options => dispatch => {\n  return profileApi.likedPost(options).then(data => {\n    if (data.result_code === 0) {\n      return dispatch(setPostLikes(data.post));\n    } else {}\n\n    ;\n  });\n};\nexport const deletePost = options => dispatch => {\n  profileApi.deletePost(options).then(data => {\n    if (data.result_code === 0) {\n      dispatch(deletePostActionCreator(data.post));\n    } else {}\n\n    ;\n  });\n};\nexport const updateProfile = options => dispatch => {\n  return profileApi.updateProfile(options).then(data => {\n    if (data.result_code === 0) {\n      return dispatch(updateProfileActionCreator());\n    } else {}\n\n    ;\n  });\n};\nexport const setUserProfileActionCreator = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const setUserPosts = posts => ({\n  type: SET_USER_POSTS,\n  posts\n});\nexport const addPost = post => ({\n  type: ADD_POST,\n  post\n});\nexport const setPostLikes = post => ({\n  type: SET_LIKES_POST,\n  post\n});\nexport const deletePostActionCreator = post => ({\n  type: DELETE_POST,\n  post\n});\nexport const updateProfileActionCreator = () => ({\n  type: UPDATE_PROFILE\n});\nexport default profileReducer;","map":{"version":3,"sources":["/home/i/Documents/projects/social-network/src/reducers/profileReducer.js"],"names":["profileApi","stopSubmit","ADD_POST","ADD_NEW_TEXT","SET_USER_PROFILE","SET_USER_POSTS","SET_LIKES_POST","DELETE_POST","UPDATE_PROFILE","initial_state","posts","profile","profileReducer","state","action","type","concat","post","addNewText","text","setUserProfile","map","id","filter","state_copy","textNewPost","getProfile","options","dispatch","then","data","result_code","console","log","setUserProfileActionCreator","getPosts","setUserPosts","createPost","addPost","_error","message","likedPost","setPostLikes","deletePost","deletePostActionCreator","updateProfile","updateProfileActionCreator"],"mappings":"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","sourcesContent":["import {profileApi} from '../api/api.js';\nimport {stopSubmit} from 'redux-form';\n\nconst ADD_POST = 'ADD-POST';\nconst ADD_NEW_TEXT = 'ADD-NEW-TEXT';\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\nconst SET_USER_POSTS = 'SET-USER-POSTS';\nconst SET_LIKES_POST = 'SET_LIKES_POST';\nconst DELETE_POST = 'DELETE-POST';\nconst UPDATE_PROFILE = 'UPDATE-PROFILE';\n\nlet initial_state = {\n    posts: [\n    ],\n    profile: null,\n};\n\nlet profileReducer = (state = initial_state, action) => {\n\n    switch (action.type) {\n        case(ADD_POST):\n            return {\n                ...state,\n                posts: state.posts.concat(action.post),\n            };\n        case(ADD_NEW_TEXT):\n            return addNewText(state, action.text);\n        case(SET_USER_PROFILE):\n            return setUserProfile(state, action.profile);\n        case SET_USER_POSTS:\n            return {\n                ...state, \n                //...state.profile,\n                posts: action.posts\n            };\n        case SET_LIKES_POST:\n            let posts = state.posts.map(post => {\n                if(post.id != action.post.id){\n                    return post;\n                }else{\n                    return action.post;\n                };\n            });\n\n            return {\n                ...state,\n                posts,\n            };\n        case DELETE_POST: \n\n            return {\n                ...state,\n                posts: state.posts.filter(post => {\n                    return (post.id != action.post.id)\n                }),\n            };\n        case UPDATE_PROFILE:\n            return {\n                ...state,\n                profile: {...state.profile},\n            };\n    };\n    return state;\n};\n\nfunction addNewText (state, text) {\n    let state_copy = {...state};\n    state_copy.textNewPost = text;\n    return state_copy;\n};\n\nfunction setUserProfile (state, profile) {\n    let state_copy = {...state};\n    state_copy.profile = profile;\n    return state_copy;\n};\n\nexport const getProfile = options => dispatch => {\n    profileApi.getProfile(options)\n        .then(data => {\n            if(data.data.result_code === 0){\n                console.log('profile object!!!' + ' ');\n            console.log(data.data);\n                dispatch(setUserProfileActionCreator(data.data));\n            }\n        });\n};\n\nexport const getPosts = options => dispatch => {\n    profileApi.getPosts(options)\n        .then(data => {\n            if(data.result_code === 0 ){\n                dispatch(setUserPosts(data.posts));\n                console.log(data);\n            }\n        });\n};\n\nexport const createPost = options => dispatch => {\n    profileApi.createPost(options)\n        .then(data => {\n            if(data.result_code === 0) {\n                dispatch(addPost(data.post));\n            }else{\n                dispatch(stopSubmit('create_post', {_error: data.message}));\n            };\n        });\n};\n\nexport const likedPost = options => dispatch => {\n    return profileApi.likedPost(options)\n        .then(data => {\n            if(data.result_code === 0) {\n                return dispatch(setPostLikes( data.post, ));\n            }else{\n            };\n        });\n};\n\nexport const deletePost = options => dispatch => {\n    profileApi.deletePost(options)\n        .then(data => {\n            if(data.result_code === 0) {\n                dispatch(deletePostActionCreator( data.post ));\n            }else{\n            };\n        });\n};\n\nexport const updateProfile = options => dispatch => {\n    return profileApi.updateProfile(options)\n        .then(data => {\n            if(data.result_code === 0) {\n                return dispatch(updateProfileActionCreator() );\n            }else{\n            };\n        });\n};\n\n\nexport const setUserProfileActionCreator = profile => ({type: SET_USER_PROFILE, profile});\nexport const setUserPosts = posts => ({type: SET_USER_POSTS, posts});\nexport const addPost = post => ({type: ADD_POST, post});\nexport const setPostLikes = (post) => ({type: SET_LIKES_POST, post}); \nexport const deletePostActionCreator = (post) => ({type: DELETE_POST, post});\nexport const updateProfileActionCreator = () => ({type: UPDATE_PROFILE});\n\nexport default profileReducer;\n\n\n"]},"metadata":{},"sourceType":"module"}