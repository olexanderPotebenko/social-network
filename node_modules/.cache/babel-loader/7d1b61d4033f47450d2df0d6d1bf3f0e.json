{"ast":null,"code":"var _jsxFileName = \"/root/Documents/projects/social-network/src/components/Messages/Dialog/SendMessage/SendMessage.jsx\";\nimport React from 'react';\nimport { Field, reset, reduxForm } from 'redux-form';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport WithAuthData from '../../../../hocs/WithAuthData.jsx';\nimport styles from './SendMessage.module.css';\nimport { Button } from '../../../commons/FormsControls/FormsControls.jsx';\nimport { getDialog } from '../../../../reducers/messagesReducer.js';\nlet svg = [/*#__PURE__*/React.createElement(\"svg\", {\n  fill: \"none\",\n  class: \"rubicons send-alt\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"36\",\n  height: \"36\",\n  viewBox: \"0 0 24 24\",\n  stroke: \"currentColor\",\n  \"stroke-width\": \"1.5\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 12L4 4l3.556 8L4 20l16-8zM7.556 12H20\",\n  \"stroke-linecap\": \"round\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }\n}))];\nconst maxlength = 1001;\n\nconst TextArea2 = ({\n  input,\n  meta,\n  textareaIsFocused,\n  toggleTextareaFocused,\n  ...props\n}) => {\n  if (props.propsRef.current) {\n    setTimeout(() => {\n      if (props.propsRef.current && !textareaIsFocused) {\n        toggleTextareaFocused();\n        props.propsRef.current.focus();\n      }\n    }, 100);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles['input-wrp'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", Object.assign({\n    ref: props.propsRef\n  }, input, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  })));\n};\n\n_c = TextArea2;\n\nclass SendMessage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      field: /*#__PURE__*/React.createRef(),\n      textarea: /*#__PURE__*/React.createRef(),\n      textareaIsFocused: false,\n      wrp: this.props.wrp,\n      input: /*#__PURE__*/React.createRef(),\n      interval: false,\n      styles: {},\n      text: ''\n    };\n\n    this.toggleTextareaFocused = () => {\n      this.setState({\n        textareaIsFocused: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    let interval;\n\n    if (!this.state.interval) {\n      interval = setInterval(() => {\n        let {\n          wrp,\n          input,\n          field,\n          textarea,\n          interval,\n          styles,\n          text\n        } = this.state;\n\n        if (input.current && wrp.current) {\n          if (!Object.keys(styles).length) {\n            this.setState({\n              styles: {\n                'input-max-width': input.current.clientWidth,\n                'input-start-height': input.current.clientHeight,\n                'input-max-height': 600,\n                'input-height': input.current.clientHeight,\n                'wrp-start-grid-template-rows': wrp.current.style.gridTemplateRows,\n                'wrp-grid-template-rows': wrp.current.style.gridTemplateRows\n              }\n            });\n          } else {\n            let inputHeight = this.state.input.current.clientHeight;\n\n            if (inputHeight != this.state.styles['input-height']) {\n              let startWrpStyle = styles['wrp-start-grid-template-rows'];\n              let newWrpStyle = [];\n              newWrpStyle = newWrpStyle.concat(startWrpStyle.split(' ').slice(0, 2), parseInt(startWrpStyle.split(' ')[2]) + (inputHeight - styles['input-start-height']) + 'px').join(' ');\n              this.setState({\n                styles: { ...styles,\n                  ['input-height']: inputHeight,\n                  ['wrp-grid-template-rows']: newWrpStyle\n                }\n              });\n            }\n          }\n        }\n\n        if (textarea.current && input.current) {\n          if (text != textarea.current.innerHTML) {\n            let newText = textarea.current.innerHTML;\n            newText.slice(0, maxlength - 1000);\n            textarea.current.value = newText;\n            this.setState({\n              text: newText\n            });\n          }\n        }\n      }, 10);\n      this.setState({\n        interval\n      });\n    }\n  }\n\n  render() {\n    if (this.state.wrp.current) {\n      this.state.wrp.current.style.gridTemplateRows = this.state.styles['wrp-grid-template-rows'];\n    }\n\n    let button = /*#__PURE__*/React.createRef();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.wrp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"form\", {\n      className: styles['form-wrp'],\n      onSubmit: this.props.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['send-message-wrp'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['send-message'],\n      style: {\n        'max-width': this.state.styles['input-max-width'],\n        'max-height': this.state.styles['input-max-height']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.state.input,\n      contenteditable: \"true\",\n      onChange: e => {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, this.state.text), /*#__PURE__*/React.createElement(Field, {\n      ref: this.state.field,\n      name: \"send-message\",\n      autoFocus: true,\n      disabled: this.props.dialogIsFetching,\n      dialogIsFetching: this.props.dialogIsFetching,\n      textareaIsFocused: this.state.textareaIsFocused,\n      toggleTextareaFocused: this.toggleTextareaFocused.bind(this),\n      style: {\n        height: '15px',\n        'overflow': 'hidden'\n      },\n      validate: [],\n      placeholder: \"enter text message...\",\n      component: TextArea2,\n      propsRef: this.state.textarea,\n      normalize: value => value.slice(0, maxlength),\n      onChange: e => {\n        if (e.nativeEvent.inputType === 'insertLineBreak') {\n          e.preventDefault();\n          this.props.handleSubmit();\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['submit-button-wrp'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }\n    }, svg[0])), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nconst mapsStateToProps = state => {\n  return {\n    currentDialog: state.messagesPage.currentDialog,\n    dialogIsFetching: state.messagesPage.dialogIsFetching\n  };\n};\n\nconst mapsDispatchToProps = {\n  getDialog\n};\nexport default compose(reduxForm({\n  form: 'sendMessage',\n  onSubmitSuccess: (data, dispatch) => dispatch(reset('sendMessage'))\n}), WithAuthData, connect(mapsStateToProps, mapsDispatchToProps))(SendMessage);\n\nvar _c;\n\n$RefreshReg$(_c, \"TextArea2\");","map":{"version":3,"sources":["/root/Documents/projects/social-network/src/components/Messages/Dialog/SendMessage/SendMessage.jsx"],"names":["React","Field","reset","reduxForm","compose","connect","WithAuthData","styles","Button","getDialog","svg","maxlength","TextArea2","input","meta","textareaIsFocused","toggleTextareaFocused","props","propsRef","current","setTimeout","focus","SendMessage","Component","state","field","createRef","textarea","wrp","interval","text","setState","componentDidMount","setInterval","Object","keys","length","clientWidth","clientHeight","style","gridTemplateRows","inputHeight","startWrpStyle","newWrpStyle","concat","split","slice","parseInt","join","innerHTML","newText","value","render","button","handleSubmit","e","dialogIsFetching","bind","height","nativeEvent","inputType","preventDefault","mapsStateToProps","currentDialog","messagesPage","mapsDispatchToProps","form","onSubmitSuccess","data","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Field, reset, reduxForm} from 'redux-form';\nimport {compose} from 'redux';\nimport {connect} from 'react-redux';\nimport WithAuthData from '../../../../hocs/WithAuthData.jsx';\n\nimport styles from './SendMessage.module.css';\n\nimport {Button} from '../../../commons/FormsControls/FormsControls.jsx';\nimport {getDialog} from '../../../../reducers/messagesReducer.js';\n\nlet svg = [\n  <svg fill=\"none\" class=\"rubicons send-alt\" xmlns=\"http://www.w3.org/2000/svg\" \n    width=\"36\" height=\"36\" \n    viewBox=\"0 0 24 24\" \n    stroke=\"currentColor\" stroke-width=\"1.5\">\n    <path d=\"M20 12L4 4l3.556 8L4 20l16-8zM7.556 12H20\" stroke-linecap=\"round\"></path>\n  </svg>,\n];\n\n\nconst maxlength = 1001;\n\nconst TextArea2 = ({input, meta, textareaIsFocused, toggleTextareaFocused, ...props}) => {\n  if(props.propsRef.current) {\n    setTimeout(() => {\n      if(props.propsRef.current && !textareaIsFocused) {\n        toggleTextareaFocused();\n        props.propsRef.current.focus();\n      }\n    }, 100);\n  }\n  return <div className={styles['input-wrp']}>\n    <textarea ref={props.propsRef} {...input} {...props} />\n  </div>\n};\n\nclass SendMessage extends React.Component {\n\n  componentDidMount () {\n\n    let interval;\n    if(!this.state.interval) {\n      interval = setInterval(() => {\n        let {wrp, input, field, textarea, interval, styles, text} = this.state;\n\n        if (input.current && wrp.current) {\n          if(!Object.keys(styles).length) {\n            this.setState({\n              styles: {\n                'input-max-width': input.current.clientWidth,\n                'input-start-height': input.current.clientHeight,\n                'input-max-height': 600,\n                'input-height': input.current.clientHeight,\n\n                'wrp-start-grid-template-rows': wrp.current.style.gridTemplateRows,\n                'wrp-grid-template-rows': wrp.current.style.gridTemplateRows,\n              }\n            })\n          } else {\n\n            let inputHeight = this.state.input.current.clientHeight;\n            if(inputHeight != this.state.styles['input-height']) {\n              let startWrpStyle = styles['wrp-start-grid-template-rows'];\n              let newWrpStyle = [];\n              newWrpStyle = newWrpStyle.concat(startWrpStyle.split(' ').slice(0, 2), \n                (parseInt(startWrpStyle.split(' ')[2]) \n                  + (inputHeight - styles['input-start-height']) ) + 'px' ).join(' ');\n              this.setState({\n                styles: {\n                  ...styles,\n                  ['input-height']: inputHeight,\n                  ['wrp-grid-template-rows']: newWrpStyle, \n                }\n              })\n            }\n          }\n        }\n\n        if(textarea.current && input.current) {\n          if(text != textarea.current.innerHTML) {\n            let newText = textarea.current.innerHTML;\n            newText.slice(0, maxlength - 1000);\n            textarea.current.value = newText;\n            this.setState({text: newText});\n          }\n        }\n\n      }, 10)\n      this.setState({interval});\n    }\n  }\n\n  state = {\n    field: React.createRef(),\n    textarea: React.createRef(),\n    textareaIsFocused: false,\n    wrp: this.props.wrp,\n    input: React.createRef(),\n    interval: false,\n    styles: {},\n    text: '',\n  }\n\n  toggleTextareaFocused = () => {\n    this.setState({textareaIsFocused: true});\n  }\n\n  render() {\n\n    if(this.state.wrp.current) {\n      this.state.wrp.current.style.gridTemplateRows = this.state.styles['wrp-grid-template-rows'];\n    }\n    let button = React.createRef();\n    return <div className={styles.wrp}>\n      <div></div>\n      <form className={styles['form-wrp']} onSubmit={this.props.handleSubmit}>\n\n        <div className={styles['send-message-wrp']}>\n          <div className={styles['send-message']}\n            style={ {\n              'max-width': this.state.styles['input-max-width'],\n              'max-height': this.state.styles['input-max-height'],\n            } }> \n            <div ref={this.state.input} contenteditable='true'\n              onChange={e => {\n              }\n              }\n            >\n              {this.state.text}\n            </div>\n            <Field ref={this.state.field} name='send-message'\n              autoFocus={true}\n              disabled={this.props.dialogIsFetching}\n              dialogIsFetching={this.props.dialogIsFetching}\n              textareaIsFocused={this.state.textareaIsFocused}\n              toggleTextareaFocused={this.toggleTextareaFocused.bind(this)}\n              style={ {height: '15px', 'overflow': 'hidden' } }\n              validate={[]} placeholder='enter text message...'\n              component={TextArea2} \n              propsRef={this.state.textarea}\n              normalize={ value => value.slice(0, maxlength) }\n              onChange={(e) => {\n                if(e.nativeEvent.inputType === 'insertLineBreak') {\n                  e.preventDefault();\n                  this.props.handleSubmit();\n              } } }\n            /> \n          </div>\n        </div>\n\n        <div className={styles['submit-button-wrp']}>\n          <button >\n            {svg[0]}\n          </button>\n        </div>\n        <div>\n        </div>\n      </form>\n      <div></div>\n    </div>\n  }\n}\n\nconst mapsStateToProps = state => {\n  return {\n    currentDialog: state.messagesPage.currentDialog,\n    dialogIsFetching: state.messagesPage.dialogIsFetching,\n  }\n};\n\nconst mapsDispatchToProps = {\n  getDialog,\n};\n\nexport default compose(\n  reduxForm({form: 'sendMessage',\n    onSubmitSuccess: (data, dispatch) => dispatch(reset('sendMessage')),\n  }),\n  WithAuthData,\n  connect(mapsStateToProps, mapsDispatchToProps),\n)(SendMessage);\n"]},"metadata":{},"sourceType":"module"}