{"ast":null,"code":"var _jsxFileName = \"/home/i/Documents/projects/social-network/src/components/Profile/Posts/Posts.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm, Field } from 'redux-form';\nimport styles from './Posts.module.css';\nimport default_avatar from '../../../assets/images/avatar_default.png';\nimport Post from './Post/Post.jsx';\nimport CreatePost from './CreatePost/CreatePost';\nimport { TextArea, Button } from '../../commons/FormsControls/FormsControls';\nimport Anchor from '../../commons/Anchor/Anchor';\nimport Modal from '../../commons/Modal/Modal';\nimport ListIsEmpty from '../../commons/ListIsEmpty/ListIsEmpty';\nimport { getPosts, createPost } from '../../../reducers/profileReducer';\n\nclass Posts extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      postedModal: false\n    };\n\n    this.onSubmit = post => {\n      this.changeVisibleModal(false);\n      let {\n        id,\n        token\n      } = this.props.auth;\n      let fd = new FormData();\n      fd.append('text', post.create_post);\n      fd.append('image', post.picture);\n      let options = {\n        id,\n        token,\n        post: fd\n      };\n      this.props.createPost(options);\n    };\n\n    this.changeVisibleModal = (bool => this.setState({\n      postedModal: bool\n    })).bind(this);\n  }\n\n  componentDidMount() {\n    let options = {\n      user_id: this.props.profile.id\n    };\n    this.props.getPosts(options);\n  }\n\n  componentWillUpdate() {\n    if (this.props.profile !== null) {\n      let route_profile = this.props.location.pathname.split('/').filter(item => item !== '')[1];\n      let current_profile = this.props.profile.id;\n\n      if (route_profile !== current_profile) {\n        let options = {\n          user_id: route_profile\n        };\n        this.props.getPosts(options);\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  render() {\n    let scrollbar = React.createRef();\n    let posts = [];\n\n    if (this.props.posts) {\n      posts = this.props.posts.map(item => {\n        return /*#__PURE__*/React.createElement(Post, {\n          avatar: default_avatar,\n          posts: this.props.posts,\n          post: item,\n          auth: this.props.auth,\n          scrollbar: scrollbar,\n          profile: this.props.profile,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }\n        });\n      });\n      posts.reverse();\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: scrollbar,\n      className: styles.posts + ' custom_scroll_bar',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Anchor, {\n      scrollbar: scrollbar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }), this.state.postedModal && /*#__PURE__*/React.createElement(Modal, {\n      width: 700,\n      height: 500,\n      Component: CreatePost,\n      changeVisibleModal: this.changeVisibleModal,\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 47\n      }\n    }), this.props.auth.id == this.props.profile.id && /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.create_post_button_wrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: styles.create_post_button,\n      onClick: () => {\n        this.changeVisibleModal(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 37\n      }\n    }, \"CREATE NEW POST\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }\n    }, posts.length > 0 && posts || /*#__PURE__*/React.createElement(ListIsEmpty, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 48\n      }\n    })));\n  }\n\n}\n\n;\n\nlet mapsStateToProps = state => ({\n  textNewPost: state.profilePage.textNewPost,\n  profile: state.profilePage.profile,\n  posts: state.profilePage.posts,\n  auth: state.auth\n});\n\nlet mapsDispatchToProps = {\n  getPosts,\n  createPost\n};\nexport default connect(mapsStateToProps, mapsDispatchToProps)(Posts);","map":{"version":3,"sources":["/home/i/Documents/projects/social-network/src/components/Profile/Posts/Posts.jsx"],"names":["React","connect","reduxForm","Field","styles","default_avatar","Post","CreatePost","TextArea","Button","Anchor","Modal","ListIsEmpty","getPosts","createPost","Posts","Component","state","postedModal","onSubmit","post","changeVisibleModal","id","token","props","auth","fd","FormData","append","create_post","picture","options","bool","setState","bind","componentDidMount","user_id","profile","componentWillUpdate","route_profile","location","pathname","split","filter","item","current_profile","render","scrollbar","createRef","posts","map","reverse","create_post_button_wrapper","create_post_button","length","mapsStateToProps","textNewPost","profilePage","mapsDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,SAAR,EAAmBC,KAAnB,QAA+B,YAA/B;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,cAAP,MAA2B,2CAA3B;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA,SAAQC,QAAR,EAAkBC,MAAlB,QAA+B,2CAA/B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,SAAQC,QAAR,EAAkBC,UAAlB,QAAmC,kCAAnC;;AAGA,MAAMC,KAAN,SAAoBf,KAAK,CAACgB,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAEhCC,KAFgC,GAExB;AACJC,MAAAA,WAAW,EAAE;AADT,KAFwB;;AAAA,SAgChCC,QAhCgC,GAgCpBC,IAAD,IAAU;AACjB,WAAKC,kBAAL,CAAwB,KAAxB;AACA,UAAI;AAACC,QAAAA,EAAD;AAAKC,QAAAA;AAAL,UAAc,KAAKC,KAAL,CAAWC,IAA7B;AACA,UAAIC,EAAE,GAAG,IAAIC,QAAJ,EAAT;AACAD,MAAAA,EAAE,CAACE,MAAH,CAAU,MAAV,EAAkBR,IAAI,CAACS,WAAvB;AACAH,MAAAA,EAAE,CAACE,MAAH,CAAU,OAAV,EAAmBR,IAAI,CAACU,OAAxB;AACA,UAAIC,OAAO,GAAG;AACVT,QAAAA,EADU;AACNC,QAAAA,KADM;AAEVH,QAAAA,IAAI,EAAEM;AAFI,OAAd;AAIA,WAAKF,KAAL,CAAWV,UAAX,CAAsBiB,OAAtB;AAEH,KA5C+B;;AAAA,SAgDhCV,kBAhDgC,GAgDX,CAAEW,IAAD,IAAU,KAAKC,QAAL,CAAc;AAACf,MAAAA,WAAW,EAAEc;AAAd,KAAd,CAAX,EAA+CE,IAA/C,CAAoD,IAApD,CAhDW;AAAA;;AAMhCC,EAAAA,iBAAiB,GAAG;AAEhB,QAAIJ,OAAO,GAAG;AACVK,MAAAA,OAAO,EAAE,KAAKZ,KAAL,CAAWa,OAAX,CAAmBf;AADlB,KAAd;AAGA,SAAKE,KAAL,CAAWX,QAAX,CAAoBkB,OAApB;AACH;;AAEDO,EAAAA,mBAAmB,GAAG;AAClB,QAAG,KAAKd,KAAL,CAAWa,OAAX,KAAuB,IAA1B,EAA+B;AAC3B,UAAIE,aAAa,GAAG,KAAKf,KAAL,CAAWgB,QAAX,CAAoBC,QAApB,CACfC,KADe,CACT,GADS,EACJC,MADI,CACGC,IAAI,IAAIA,IAAI,KAAK,EADpB,EACwB,CADxB,CAApB;AAEA,UAAIC,eAAe,GAAG,KAAKrB,KAAL,CAAWa,OAAX,CAAmBf,EAAzC;;AAEA,UAAGiB,aAAa,KAAKM,eAArB,EAAsC;AAElC,YAAId,OAAO,GAAG;AACVK,UAAAA,OAAO,EAAEG;AADC,SAAd;AAIA,aAAKf,KAAL,CAAWX,QAAX,CAAoBkB,OAApB;AACH;;AAAA;AACJ;;AAAA;AAEJ;;AAoBDe,EAAAA,MAAM,GAAG;AAEL,QAAIC,SAAS,GAAG/C,KAAK,CAACgD,SAAN,EAAhB;AACA,QAAIC,KAAK,GAAG,EAAZ;;AACA,QAAG,KAAKzB,KAAL,CAAWyB,KAAd,EAAoB;AAChBA,MAAAA,KAAK,GAAG,KAAKzB,KAAL,CAAWyB,KAAX,CAAiBC,GAAjB,CAAuBN,IAAD,IAAW;AACrC,4BACI,oBAAC,IAAD;AAAM,UAAA,MAAM,EAAEvC,cAAd;AACI,UAAA,KAAK,EAAE,KAAKmB,KAAL,CAAWyB,KADtB;AAEI,UAAA,IAAI,EAAEL,IAFV;AAEgB,UAAA,IAAI,EAAE,KAAKpB,KAAL,CAAWC,IAFjC;AAGI,UAAA,SAAS,EAAEsB,SAHf;AAII,UAAA,OAAO,EAAE,KAAKvB,KAAL,CAAWa,OAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,OARO,CAAR;AAUAY,MAAAA,KAAK,CAACE,OAAN;AACH;;AAGD,wBACI;AAAK,MAAA,GAAG,EAAEJ,SAAV;AAAqB,MAAA,SAAS,EAAE3C,MAAM,CAAC6C,KAAP,GAAe,oBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAEF,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAIQ,KAAK9B,KAAL,CAAWC,WAAX,iBAA0B,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,GAAd;AAAmB,MAAA,MAAM,EAAE,GAA3B;AAAgC,MAAA,SAAS,EAAEX,UAA3C;AACtB,MAAA,kBAAkB,EAAG,KAAKc,kBADJ;AAEtB,MAAA,QAAQ,EAAE,KAAKF,QAFO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJlC,EAUgB,KAAKK,KAAL,CAAWC,IAAX,CAAgBH,EAAhB,IAAsB,KAAKE,KAAL,CAAWa,OAAX,CAAmBf,EAAzC,iBACI;AAAK,MAAA,SAAS,EAAElB,MAAM,CAACgD,0BAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,SAAS,EAAEhD,MAAM,CAACiD,kBAA1B;AACI,MAAA,OAAO,EAAE,MAAM;AAAC,aAAKhC,kBAAL,CAAwB,IAAxB;AAA8B,OADlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,CAXpB,eAkBoB;AAAK,MAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQ4B,KAAK,CAACK,MAAN,GAAe,CAAf,IAAoBL,KAApB,iBACO,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHf,CAlBpB,CADJ;AA4BH;;AAjG+B;;AAkGnC;;AAED,IAAIM,gBAAgB,GAAItC,KAAD,KAAY;AAC/BuC,EAAAA,WAAW,EAAEvC,KAAK,CAACwC,WAAN,CAAkBD,WADA;AAE/BnB,EAAAA,OAAO,EAAEpB,KAAK,CAACwC,WAAN,CAAkBpB,OAFI;AAG/BY,EAAAA,KAAK,EAAEhC,KAAK,CAACwC,WAAN,CAAkBR,KAHM;AAI/BxB,EAAAA,IAAI,EAAER,KAAK,CAACQ;AAJmB,CAAZ,CAAvB;;AAOA,IAAIiC,mBAAmB,GAAG;AACtB7C,EAAAA,QADsB;AAEtBC,EAAAA;AAFsB,CAA1B;AAMA,eAAeb,OAAO,CAACsD,gBAAD,EAAmBG,mBAAnB,CAAP,CAA+C3C,KAA/C,CAAf","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {reduxForm, Field} from 'redux-form';\n\nimport styles from './Posts.module.css';\nimport default_avatar from '../../../assets/images/avatar_default.png';\nimport Post from './Post/Post.jsx';\nimport CreatePost from './CreatePost/CreatePost';\n\nimport {TextArea, Button} from '../../commons/FormsControls/FormsControls';\nimport Anchor from '../../commons/Anchor/Anchor';\nimport Modal from '../../commons/Modal/Modal';\nimport ListIsEmpty from '../../commons/ListIsEmpty/ListIsEmpty';\nimport {getPosts, createPost} from '../../../reducers/profileReducer';\n\n\nclass Posts extends React.Component {\n\n    state = {\n        postedModal: false,\n    }\n\n    componentDidMount() {\n\n        let options = {\n            user_id: this.props.profile.id, \n        }\n        this.props.getPosts(options);\n    }\n\n    componentWillUpdate() {\n        if(this.props.profile !== null){\n            let route_profile = this.props.location.pathname\n                .split('/').filter(item => item !== '')[1];\n            let current_profile = this.props.profile.id;\n\n            if(route_profile !== current_profile) {\n\n                let options = {\n                    user_id: route_profile, \n                }\n\n                this.props.getPosts(options);\n            };\n        };\n\n    }\n\n    onSubmit = (post) => {\n        this.changeVisibleModal(false);\n        let {id, token} = this.props.auth;\n        let fd = new FormData();\n        fd.append('text', post.create_post);\n        fd.append('image', post.picture);\n        let options = {\n            id, token,\n            post: fd,\n        }\n        this.props.createPost(options);\n\n    };\n\n\n\n    changeVisibleModal = ((bool) => this.setState({postedModal: bool})).bind(this);\n\n    render() {\n\n        let scrollbar = React.createRef();\n        let posts = [];\n        if(this.props.posts){\n            posts = this.props.posts.map( (item) =>  {\n                return (\n                    <Post avatar={default_avatar} \n                        posts={this.props.posts}\n                        post={item} auth={this.props.auth} \n                        scrollbar={scrollbar}\n                        profile={this.props.profile}></Post>\n                ) \n            }\n            );\n            posts.reverse();\n        }\n\n        \n        return (\n            <div ref={scrollbar} className={styles.posts + ' custom_scroll_bar'} >\n\n                <Anchor scrollbar={scrollbar} />\n                {\n                    this.state.postedModal && <Modal width={700} height={500} Component={CreatePost}\n                        changeVisibleModal={ this.changeVisibleModal }\n                        onSubmit={this.onSubmit} />\n\n                }\n                        {\n                            this.props.auth.id == this.props.profile.id &&\n                                <div className={styles.create_post_button_wrapper}>\n                                    <button className={styles.create_post_button}\n                                        onClick={() => {this.changeVisibleModal(true)}} >\n                                        CREATE NEW POST\n                                    </button>\n                                </div>\n                        }\n                                <div className=''>\n                                    {\n                                        posts.length > 0 && posts\n                                            || <ListIsEmpty />\n                                    }\n                                        </div>\n\n                                    </div>\n        );\n    }\n};\n\nlet mapsStateToProps = (state) => ({\n    textNewPost: state.profilePage.textNewPost,\n    profile: state.profilePage.profile,\n    posts: state.profilePage.posts,\n    auth: state.auth,\n});\n\nlet mapsDispatchToProps = {\n    getPosts,\n    createPost,\n};\n\n\nexport default connect(mapsStateToProps, mapsDispatchToProps)(Posts); \n\n\n"]},"metadata":{},"sourceType":"module"}