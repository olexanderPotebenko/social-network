{"ast":null,"code":"export const requiredFields = value => {\n  return value ? undefined : 'Field is required !';\n};\nexport const maxLengthCreator = max_length => value => {\n  return value && value.length <= max_length ? undefined : `Max length is ${max_length}`;\n};\nexport const maxLengthOrNothingCreator = max_length => value => {\n  return !value || value.length <= max_length ? undefined : `Max length is ${max_length}`;\n};\nexport const minLengthCreator = min_length => value => {\n  return value && value.length >= min_length ? undefined : `Min length is ${min_length}`;\n};\nexport const minLengthOrNothingCreator = min_length => value => {\n  return !value || value.length >= min_length ? undefined : `Min length is ${min_length}`;\n};\nexport const emailValidate = address => {\n  let reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/;\n  return reg.test(address) ? undefined : 'Enter correct email address';\n};\nexport const phoneNumberValidate = phone => {\n  let reg = /^(0|[1-9][0-9]{9})$/i;\n  return reg.test(phone) ? undefined : 'Enter correct phone number';\n};\nexport const onlyLetters = value => {\n  let reg = /^\\s*[a-z]*\\s*$/i;\n  return reg.test(value) ? undefined : 'Fields must been equals english letters only';\n};\nexport const matchPasswords = (password, all_values) => {\n  return password === all_values.password ? undefined : 'Enter passwords is no match';\n};\nexport const complexPassword = value => {\n  let regs = [/[a-z]/, /[A-Z]/, /\\d/];\n  let test = regs.reduce((result, reg) => {\n    return result && reg.test(value);\n  }, true);\n  return test ? undefined : 'Password must include numbers and letters in uppercase and lowercase';\n};\nexport const onlyDigit = value => {\n  return /^\\d*$/.test(value) ? undefined : 'Fields must been equals digits only';\n};","map":{"version":3,"sources":["/root/Documents/projects/social-network/src/utils/validators.js"],"names":["requiredFields","value","undefined","maxLengthCreator","max_length","length","maxLengthOrNothingCreator","minLengthCreator","min_length","minLengthOrNothingCreator","emailValidate","address","reg","test","phoneNumberValidate","phone","onlyLetters","matchPasswords","password","all_values","complexPassword","regs","reduce","result","onlyDigit"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAGC,KAAK,IAAI;AACnC,SAAOA,KAAK,GAAGC,SAAH,GAAc,qBAA1B;AACH,CAFM;AAIP,OAAO,MAAMC,gBAAgB,GAAIC,UAAD,IAAiBH,KAAD,IAAW;AACvD,SAAOA,KAAK,IAAIA,KAAK,CAACI,MAAN,IAAgBD,UAAzB,GAAqCF,SAArC,GAAiD,iBAAgBE,UAAW,EAAnF;AACH,CAFM;AAIP,OAAO,MAAME,yBAAyB,GAAIF,UAAD,IAAiBH,KAAD,IAAW;AAChE,SAAO,CAACA,KAAD,IAAUA,KAAK,CAACI,MAAN,IAAgBD,UAA1B,GAAsCF,SAAtC,GAAkD,iBAAgBE,UAAW,EAApF;AACH,CAFM;AAIP,OAAO,MAAMG,gBAAgB,GAAIC,UAAD,IAAiBP,KAAD,IAAW;AACvD,SAAOA,KAAK,IAAIA,KAAK,CAACI,MAAN,IAAgBG,UAAzB,GAAqCN,SAArC,GAAiD,iBAAgBM,UAAW,EAAnF;AACH,CAFM;AAIP,OAAO,MAAMC,yBAAyB,GAAID,UAAD,IAAiBP,KAAD,IAAW;AAChE,SAAO,CAACA,KAAD,IAAUA,KAAK,CAACI,MAAN,IAAgBG,UAA1B,GAAsCN,SAAtC,GAAkD,iBAAgBM,UAAW,EAApF;AACH,CAFM;AAKP,OAAO,MAAME,aAAa,GAAIC,OAAD,IAAa;AACvC,MAAIC,GAAG,GAAG,6DAAV;AACA,SAAOA,GAAG,CAACC,IAAJ,CAASF,OAAT,IAAmBT,SAAnB,GAA8B,6BAArC;AACF,CAHM;AAIP,OAAO,MAAMY,mBAAmB,GAAGC,KAAK,IAAI;AACxC,MAAIH,GAAG,GAAG,sBAAV;AACA,SAAOA,GAAG,CAACC,IAAJ,CAASE,KAAT,IAAkBb,SAAlB,GAA6B,4BAApC;AACH,CAHM;AAIP,OAAO,MAAMc,WAAW,GAAGf,KAAK,IAAI;AAChC,MAAIW,GAAG,GAAG,iBAAV;AACI,SAAOA,GAAG,CAACC,IAAJ,CAASZ,KAAT,IAAkBC,SAAlB,GAA6B,8CAApC;AACP,CAHM;AAIP,OAAO,MAAMe,cAAc,GAAG,CAACC,QAAD,EAAWC,UAAX,KAA0B;AACtD,SAAOD,QAAQ,KAAKC,UAAU,CAACD,QAAxB,GAAkChB,SAAlC,GAA6C,6BAApD;AACD,CAFM;AAGP,OAAO,MAAMkB,eAAe,GAAGnB,KAAK,IAAI;AACtC,MAAIoB,IAAI,GAAG,CACT,OADS,EAET,OAFS,EAGT,IAHS,CAAX;AAKA,MAAIR,IAAI,GAAGQ,IAAI,CAACC,MAAL,CAAY,CAACC,MAAD,EAASX,GAAT,KAAiB;AACtC,WAAOW,MAAM,IAAIX,GAAG,CAACC,IAAJ,CAASZ,KAAT,CAAjB;AACD,GAFU,EAER,IAFQ,CAAX;AAIA,SAAOY,IAAI,GAAEX,SAAF,GAAa,sEAAxB;AACD,CAXM;AAaP,OAAO,MAAMsB,SAAS,GAAGvB,KAAK,IAAI;AAChC,SAAO,QAAQY,IAAR,CAAaZ,KAAb,IAAqBC,SAArB,GAAgC,qCAAvC;AACD,CAFM","sourcesContent":["export const requiredFields = value => {\n    return value ? undefined: 'Field is required !';\n};\n\nexport const maxLengthCreator = (max_length) => (value) => {\n    return value && value.length <= max_length? undefined: `Max length is ${max_length}`;\n};\n\nexport const maxLengthOrNothingCreator = (max_length) => (value) => {\n    return !value || value.length <= max_length? undefined: `Max length is ${max_length}`;\n};\n\nexport const minLengthCreator = (min_length) => (value) => {\n    return value && value.length >= min_length? undefined: `Min length is ${min_length}`;\n};\n\nexport const minLengthOrNothingCreator = (min_length) => (value) => {\n    return !value || value.length >= min_length? undefined: `Min length is ${min_length}`;\n};\n\n\nexport const emailValidate = (address) => {\n   let reg = /^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,4})$/;\n   return reg.test(address)? undefined: 'Enter correct email address';\n}\nexport const phoneNumberValidate = phone => {\n    let reg = /^(0|[1-9][0-9]{9})$/i;\n    return reg.test(phone) ? undefined: 'Enter correct phone number';\n}\nexport const onlyLetters = value => {\n    let reg = /^\\s*[a-z]*\\s*$/i;\n        return reg.test(value) ? undefined: 'Fields must been equals english letters only';\n}\nexport const matchPasswords = (password, all_values) => {\n  return password === all_values.password? undefined: 'Enter passwords is no match';\n}\nexport const complexPassword = value => { \n  let regs = [\n    /[a-z]/,\n    /[A-Z]/,\n    /\\d/,\n  ];\n  let test = regs.reduce((result, reg) => {\n    return result && reg.test(value);\n  }, true);\n\n  return test? undefined: 'Password must include numbers and letters in uppercase and lowercase';\n}\n\nexport const onlyDigit = value => {\n  return /^\\d*$/.test(value)? undefined: 'Fields must been equals digits only';\n}\n\n\n"]},"metadata":{},"sourceType":"module"}