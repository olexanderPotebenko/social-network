{"ast":null,"code":"import * as axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'http://78.140.136.124:8080/'\n});\nexport const userApi = {\n  getUsers(options) {\n    let {\n      id,\n      token,\n      page_size,\n      page_current\n    } = options;\n    return instance.get(`users/?page=${page_current}&count=${page_size}`, {\n      headers: id ? {\n        authorize: token,\n        id: id\n      } : {}\n    }).then(res => res.data);\n  }\n\n};\nexport const profileApi = {\n  getProfile(options) {\n    let {\n      id,\n      token,\n      user_id\n    } = options;\n    return instance.get(`profile/${user_id}`, {\n      headers: id ? {\n        authorize: token,\n        id: id\n      } : {}\n    }).then(res => res.data);\n  },\n\n  /*\n    getAvatar (options) {\n         let {user_id} = options;\n        return instance.get(`profile/${user_id}/avatar`)\n            .then(res => {\n                debugger;\n                return res.data \n            });\n    },\n    */\n  // posts\n  getPosts({\n    user_id,\n    count,\n    page\n  }) {\n    return instance.get(`profile/${user_id}/posts/?page=${page}&count=&{count}`).then(res => res.data);\n  },\n\n  getLikersPost({\n    user_id,\n    post_id\n  }) {\n    return instance.get(`likers/?user_id=${user_id}&post_id=${post_id}`).then(res => res.data);\n  },\n\n  createPost({\n    id,\n    token,\n    post\n  }) {\n    return instance.post(`profile/${id}/posts/`, post, {\n      headers: {\n        authorize: token,\n        id,\n        'Content-Type': 'form/multipart'\n      }\n    }).then(res => res.data);\n  },\n\n  likedPost({\n    id,\n    token,\n    user_id,\n    post_id\n  }) {\n    return instance.post(`profile/${user_id}/posts/${post_id}/like`, {}, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => res.data);\n  },\n\n  /*\n            id: this.props.auth.id,\n            user_id: this.props.profile.id,\n            token: this.props.auth.token,\n            post_id: this.props.post.id,\n            */\n  // delete\n  deletePost({\n    id,\n    token,\n    post_id\n  }) {\n    return instance.delete(`profile/${id}/posts/${post_id}`, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => {\n      console.log(res);\n      return {\n        post: {\n          id: post_id\n        },\n        result_code: 0\n      };\n    }, rej => {\n      console.log(rej);\n      return {\n        result_code: 1\n      };\n    });\n  },\n\n  // put \n  updateProfile({\n    id,\n    token,\n    formData\n  }) {\n    return instance.put(`profile/${id}/update`, formData, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => {\n      return res.data;\n    });\n  }\n\n};\nexport const authApi = {\n  signIn({\n    email,\n    password\n  }) {\n    return instance.post(`signin`, {\n      password,\n      email\n    }).then(res => {\n      return res.data;\n    });\n  },\n\n  signUp({\n    email,\n    password,\n    first_name,\n    last_name\n  }) {\n    return instance.post(`signup`, {\n      email,\n      password,\n      first_name,\n      last_name\n    }).then(res => res.data);\n  }\n\n};\nexport const followApi = {\n  follow({\n    token,\n    id,\n    user_id\n  }) {\n    return instance.post(`follow/${user_id}`, {}, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => res.data);\n  },\n\n  unfollow({\n    token,\n    id,\n    user_id\n  }) {\n    return instance.delete(`follow/${user_id}/`, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => res.data);\n  }\n\n};\nexport const messageApi = {\n  getDialogs(options) {\n    let {\n      id,\n      token\n    } = options;\n    return instance.get(`messages/${id}/`, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => res.data);\n  },\n\n  getDialog(options) {\n    let {\n      id,\n      token,\n      dialog_id\n    } = options;\n    return instance.get(`messages/${id}/dialog/${dialog_id}/`, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => res.data);\n  },\n\n  deleteDialog(options) {\n    let {\n      id,\n      token,\n      dialog_id\n    } = options;\n    return instance.delete(`messages/${id}/dialog/${dialog_id}/`, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => res.data);\n  },\n\n  sendMessage(options) {\n    let {\n      id,\n      token,\n      user_id,\n      message\n    } = options;\n    return instance.post(`messages/${id}/send/${user_id}`, {\n      message\n    }, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => res.data);\n  },\n\n  readMessages(options) {\n    let {\n      id,\n      token,\n      dialog_id,\n      messages\n    } = options;\n    return instance.put(`messages/${id}/read/${dialog_id}`, {\n      messages\n    }, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => res.data);\n  }\n\n};","map":{"version":3,"sources":["/root/Documents/projects/social-network/src/api/api.js"],"names":["axios","instance","create","baseURL","userApi","getUsers","options","id","token","page_size","page_current","get","headers","authorize","then","res","data","profileApi","getProfile","user_id","getPosts","count","page","getLikersPost","post_id","createPost","post","likedPost","deletePost","delete","console","log","result_code","rej","updateProfile","formData","put","authApi","signIn","email","password","signUp","first_name","last_name","followApi","follow","unfollow","messageApi","getDialogs","getDialog","dialog_id","deleteDialog","sendMessage","message","readMessages","messages"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAE;AADmB,CAAb,CAAjB;AAIA,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,QAAQ,CAACC,OAAD,EAAU;AAEhB,QAAI;AAACC,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAYC,MAAAA,SAAZ;AAAuBC,MAAAA;AAAvB,QAAuCJ,OAA3C;AACA,WAAOL,QAAQ,CAACU,GAAT,CAAc,eAAcD,YAAa,UAASD,SAAU,EAA5D,EACL;AACEG,MAAAA,OAAO,EAAGL,EAAE,GAAG;AAAEM,QAAAA,SAAS,EAAEL,KAAb;AAAoBD,QAAAA,EAAE,EAAEA;AAAxB,OAAH,GAAiC;AAD/C,KADK,EAGFO,IAHE,CAGGC,GAAG,IAAIA,GAAG,CAACC,IAHd,CAAP;AAID;;AARoB,CAAhB;AAWP,OAAO,MAAMC,UAAU,GAAG;AACxBC,EAAAA,UAAU,CAAEZ,OAAF,EAAW;AAEnB,QAAI;AAACC,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAYW,MAAAA;AAAZ,QAAuBb,OAA3B;AACA,WAAOL,QAAQ,CAACU,GAAT,CAAc,WAAUQ,OAAQ,EAAhC,EACL;AACEP,MAAAA,OAAO,EAAGL,EAAE,GAAG;AAAEM,QAAAA,SAAS,EAAEL,KAAb;AAAoBD,QAAAA,EAAE,EAAEA;AAAxB,OAAH,GAAiC;AAD/C,KADK,EAGFO,IAHE,CAGGC,GAAG,IAAIA,GAAG,CAACC,IAHd,CAAP;AAID,GARuB;;AAUxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGE;AACAI,EAAAA,QAAQ,CAAE;AAACD,IAAAA,OAAD;AAAUE,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,GAAF,EAA0B;AAChC,WAAOrB,QAAQ,CAACU,GAAT,CAAc,WAAUQ,OAAQ,gBAAeG,IAAK,iBAApD,EACJR,IADI,CACCC,GAAG,IAAIA,GAAG,CAACC,IADZ,CAAP;AAED,GA1BuB;;AA2BxBO,EAAAA,aAAa,CAAE;AAACJ,IAAAA,OAAD;AAAUK,IAAAA;AAAV,GAAF,EAAsB;AACjC,WAAOvB,QAAQ,CAACU,GAAT,CAAc,mBAAkBQ,OAAQ,YAAWK,OAAQ,EAA3D,EACJV,IADI,CACCC,GAAG,IAAIA,GAAG,CAACC,IADZ,CAAP;AAED,GA9BuB;;AA+BxBS,EAAAA,UAAU,CAAE;AAAClB,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYkB,IAAAA;AAAZ,GAAF,EAAqB;AAC7B,WAAOzB,QAAQ,CAACyB,IAAT,CAAe,WAAUnB,EAAG,SAA5B,EACLmB,IADK,EAEL;AAAEd,MAAAA,OAAO,EAAE;AAACC,QAAAA,SAAS,EAAEL,KAAZ;AAAmBD,QAAAA,EAAnB;AAAuB,wBAAgB;AAAvC;AAAX,KAFK,EAIJO,IAJI,CAIEC,GAAG,IAAKA,GAAG,CAACC,IAJd,CAAP;AAKD,GArCuB;;AAuCxBW,EAAAA,SAAS,CAAE;AAACpB,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYW,IAAAA,OAAZ;AAAqBK,IAAAA;AAArB,GAAF,EAAiC;AACxC,WAAOvB,QAAQ,CAACyB,IAAT,CAAe,WAAUP,OAAQ,UAASK,OAAQ,OAAlD,EACL,EADK,EAEL;AAAEZ,MAAAA,OAAO,EAAE;AAACC,QAAAA,SAAS,EAAEL,KAAZ;AAAmBD,QAAAA;AAAnB;AAAX,KAFK,EAGJO,IAHI,CAGCC,GAAG,IAAIA,GAAG,CAACC,IAHZ,CAAP;AAID,GA5CuB;;AA6CxB;AACF;AACA;AACA;AACA;AACA;AACE;AACAY,EAAAA,UAAU,CAAE;AAACrB,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYgB,IAAAA;AAAZ,GAAF,EAAwB;AAChC,WAAOvB,QAAQ,CAAC4B,MAAT,CAAiB,WAAUtB,EAAG,UAASiB,OAAQ,EAA/C,EACL;AAAEZ,MAAAA,OAAO,EAAE;AAACC,QAAAA,SAAS,EAAEL,KAAZ;AAAmBD,QAAAA;AAAnB;AAAX,KADK,EAEJO,IAFI,CAECC,GAAG,IAAI;AACXe,MAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAZ;AACA,aAAO;AAACW,QAAAA,IAAI,EAAE;AAACnB,UAAAA,EAAE,EAAEiB;AAAL,SAAP;AAAsBQ,QAAAA,WAAW,EAAE;AAAnC,OAAP;AACD,KALI,EAMHC,GAAG,IAAI;AACLH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACA,aAAO;AAACD,QAAAA,WAAW,EAAE;AAAd,OAAP;AACD,KATE,CAAP;AAWD,GAhEuB;;AAiExB;AACAE,EAAAA,aAAa,CAAE;AAAC3B,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAY2B,IAAAA;AAAZ,GAAF,EAAyB;AACpC,WAAOlC,QAAQ,CAACmC,GAAT,CAAc,WAAU7B,EAAG,SAA3B,EACL4B,QADK,EAEL;AAAEvB,MAAAA,OAAO,EAAE;AAACC,QAAAA,SAAS,EAAEL,KAAZ;AAAmBD,QAAAA;AAAnB;AAAX,KAFK,EAGJO,IAHI,CAGCC,GAAG,IAAI;AACX,aAAOA,GAAG,CAACC,IAAX;AACD,KALI,CAAP;AAMD;;AAzEuB,CAAnB;AA6EP,OAAO,MAAMqB,OAAO,GAAG;AACrBC,EAAAA,MAAM,CAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAF,EAAqB;AAEzB,WAAOvC,QAAQ,CAACyB,IAAT,CAAe,QAAf,EAAwB;AAACc,MAAAA,QAAD;AAAWD,MAAAA;AAAX,KAAxB,EACJzB,IADI,CACEC,GAAG,IAAI;AACZ,aAAOA,GAAG,CAACC,IAAX;AAAiB,KAFd,CAAP;AAID,GAPoB;;AAQrByB,EAAAA,MAAM,CAAE;AAACF,IAAAA,KAAD;AAAQC,IAAAA,QAAR;AAAkBE,IAAAA,UAAlB;AAA8BC,IAAAA;AAA9B,GAAF,EAA4C;AAEhD,WAAO1C,QAAQ,CAACyB,IAAT,CAAe,QAAf,EACL;AAACa,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkBE,MAAAA,UAAlB;AAA8BC,MAAAA;AAA9B,KADK,EAEJ7B,IAFI,CAEEC,GAAG,IAAIA,GAAG,CAACC,IAFb,CAAP;AAGD;;AAboB,CAAhB;AAgBP,OAAO,MAAM4B,SAAS,GAAG;AACvBC,EAAAA,MAAM,CAAE;AAACrC,IAAAA,KAAD;AAAQD,IAAAA,EAAR;AAAYY,IAAAA;AAAZ,GAAF,EAAwB;AAE5B,WAAOlB,QAAQ,CAACyB,IAAT,CAAe,UAASP,OAAQ,EAAhC,EAAmC,EAAnC,EACL;AAAEP,MAAAA,OAAO,EAAE;AAACC,QAAAA,SAAS,EAAEL,KAAZ;AAAmBD,QAAAA;AAAnB;AAAX,KADK,EAELO,IAFK,CAECC,GAAG,IAAIA,GAAG,CAACC,IAFZ,CAAP;AAGD,GANsB;;AAOvB8B,EAAAA,QAAQ,CAAE;AAACtC,IAAAA,KAAD;AAAQD,IAAAA,EAAR;AAAYY,IAAAA;AAAZ,GAAF,EAAwB;AAE9B,WAAOlB,QAAQ,CAAC4B,MAAT,CAAiB,UAASV,OAAQ,GAAlC,EACL;AAAEP,MAAAA,OAAO,EAAE;AAACC,QAAAA,SAAS,EAAEL,KAAZ;AAAmBD,QAAAA;AAAnB;AAAX,KADK,EAELO,IAFK,CAECC,GAAG,IAAIA,GAAG,CAACC,IAFZ,CAAP;AAGD;;AAZsB,CAAlB;AAgBP,OAAO,MAAM+B,UAAU,GAAG;AACxBC,EAAAA,UAAU,CAAE1C,OAAF,EAAW;AACnB,QAAI;AAACC,MAAAA,EAAD;AAAKC,MAAAA;AAAL,QAAcF,OAAlB;AACA,WAAOL,QAAQ,CAACU,GAAT,CAAc,YAAWJ,EAAG,GAA5B,EACL;AACEK,MAAAA,OAAO,EAAE;AAACC,QAAAA,SAAS,EAAEL,KAAZ;AAAmBD,QAAAA;AAAnB;AADX,KADK,EAGFO,IAHE,CAGGC,GAAG,IAAIA,GAAG,CAACC,IAHd,CAAP;AAID,GAPuB;;AAQxBiC,EAAAA,SAAS,CAAE3C,OAAF,EAAW;AAClB,QAAI;AAACC,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAY0C,MAAAA;AAAZ,QAAyB5C,OAA7B;AACA,WAAOL,QAAQ,CAACU,GAAT,CAAc,YAAWJ,EAAG,WAAU2C,SAAU,GAAhD,EACL;AACEtC,MAAAA,OAAO,EAAE;AAACC,QAAAA,SAAS,EAAEL,KAAZ;AAAmBD,QAAAA;AAAnB;AADX,KADK,EAGFO,IAHE,CAGGC,GAAG,IAAIA,GAAG,CAACC,IAHd,CAAP;AAID,GAduB;;AAexBmC,EAAAA,YAAY,CAAE7C,OAAF,EAAW;AACrB,QAAI;AAACC,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAY0C,MAAAA;AAAZ,QAAyB5C,OAA7B;AACA,WAAOL,QAAQ,CAAC4B,MAAT,CAAiB,YAAWtB,EAAG,WAAU2C,SAAU,GAAnD,EAAsD;AAC3DtC,MAAAA,OAAO,EAAE;AAACC,QAAAA,SAAS,EAAEL,KAAZ;AAAmBD,QAAAA;AAAnB;AADkD,KAAtD,EAEJO,IAFI,CAECC,GAAG,IAAIA,GAAG,CAACC,IAFZ,CAAP;AAGD,GApBuB;;AAqBxBoC,EAAAA,WAAW,CAAE9C,OAAF,EAAW;AACpB,QAAI;AAACC,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAYW,MAAAA,OAAZ;AAAqBkC,MAAAA;AAArB,QAAgC/C,OAApC;AACA,WAAOL,QAAQ,CAACyB,IAAT,CAAe,YAAWnB,EAAG,SAAQY,OAAQ,EAA7C,EACL;AAACkC,MAAAA;AAAD,KADK,EAEL;AACEzC,MAAAA,OAAO,EAAE;AAACC,QAAAA,SAAS,EAAEL,KAAZ;AAAmBD,QAAAA;AAAnB;AADX,KAFK,EAIFO,IAJE,CAIGC,GAAG,IAAIA,GAAG,CAACC,IAJd,CAAP;AAKD,GA5BuB;;AA6BxBsC,EAAAA,YAAY,CAAEhD,OAAF,EAAW;AACrB,QAAI;AAACC,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAY0C,MAAAA,SAAZ;AAAuBK,MAAAA;AAAvB,QAAmCjD,OAAvC;AACA,WAAOL,QAAQ,CAACmC,GAAT,CAAc,YAAW7B,EAAG,SAAQ2C,SAAU,EAA9C,EACL;AAACK,MAAAA;AAAD,KADK,EAEL;AACE3C,MAAAA,OAAO,EAAE;AAACC,QAAAA,SAAS,EAAEL,KAAZ;AAAmBD,QAAAA;AAAnB;AADX,KAFK,EAIFO,IAJE,CAIGC,GAAG,IAAIA,GAAG,CAACC,IAJd,CAAP;AAKD;;AApCuB,CAAnB","sourcesContent":["import * as axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'http://78.140.136.124:8080/',\n});\n\nexport const userApi = {\n  getUsers(options) {\n\n    let {id, token, page_size, page_current} = options;\n    return instance.get(`users/?page=${page_current}&count=${page_size}`,\n      {\n        headers:  id ? { authorize: token, id: id }: {} ,\n      }).then(res => res.data);\n  },\n};\n\nexport const profileApi = {\n  getProfile (options) {\n\n    let {id, token, user_id} = options;\n    return instance.get(`profile/${user_id}`,\n      {\n        headers:  id ? { authorize: token, id: id }: {} ,\n      }).then(res => res.data);\n  },\n\n  /*\n    getAvatar (options) {\n\n        let {user_id} = options;\n        return instance.get(`profile/${user_id}/avatar`)\n            .then(res => {\n                debugger;\n                return res.data \n            });\n    },\n    */\n\n  // posts\n  getPosts ({user_id, count, page}) {\n    return instance.get(`profile/${user_id}/posts/?page=${page}&count=&{count}`)\n      .then(res => res.data);\n  },\n  getLikersPost ({user_id, post_id}) {\n    return instance.get(`likers/?user_id=${user_id}&post_id=${post_id}`)\n      .then(res => res.data);\n  },\n  createPost ({id, token, post}) {\n    return instance.post(`profile/${id}/posts/`,\n      post,\n      { headers: {authorize: token, id, 'Content-Type': 'form/multipart'}, }\n    )\n      .then( res =>  res.data );\n  },\n\n  likedPost ({id, token, user_id, post_id}) {\n    return instance.post(`profile/${user_id}/posts/${post_id}/like`,\n      {},\n      { headers: {authorize: token, id}, })\n      .then(res => res.data);\n  },\n  /*\n            id: this.props.auth.id,\n            user_id: this.props.profile.id,\n            token: this.props.auth.token,\n            post_id: this.props.post.id,\n            */\n  // delete\n  deletePost ({id, token, post_id}) {\n    return instance.delete(`profile/${id}/posts/${post_id}`,\n      { headers: {authorize: token, id}, })\n      .then(res => {\n        console.log(res);\n        return {post: {id: post_id}, result_code: 0};\n      },\n        rej => {\n          console.log(rej);\n          return {result_code: 1};\n        } \n      )\n  },\n  // put \n  updateProfile ({id, token, formData}) {\n    return instance.put(`profile/${id}/update`,\n      formData,\n      { headers: {authorize: token, id}, })\n      .then(res => {\n        return res.data;\n      });\n  },\n\n};\n\nexport const authApi = {\n  signIn ({email, password}) {\n\n    return instance.post(`signin`, {password, email} )\n      .then( res => {\n        return res.data });\n\n  },\n  signUp ({email, password, first_name, last_name}) {\n\n    return instance.post(`signup`, \n      {email, password, first_name, last_name})\n      .then( res => res.data );\n  },\n};\n\nexport const followApi = {\n  follow ({token, id, user_id}) {\n\n    return instance.post(`follow/${user_id}`, {},\n      { headers: {authorize: token, id} }\n    ).then( res => res.data );\n  },\n  unfollow ({token, id, user_id}) {\n\n    return instance.delete(`follow/${user_id}/`, \n      { headers: {authorize: token, id} }\n    ).then( res => res.data );\n  },\n\n};\n\nexport const messageApi = {\n  getDialogs (options) {\n    let {id, token} = options\n    return instance.get(`messages/${id}/`,\n      {\n        headers: {authorize: token, id}\n      }).then(res => res.data);\n  },\n  getDialog (options) {\n    let {id, token, dialog_id} = options;\n    return instance.get(`messages/${id}/dialog/${dialog_id}/`,\n      {\n        headers: {authorize: token, id}\n      }).then(res => res.data);\n  },\n  deleteDialog (options) {\n    let {id, token, dialog_id} = options;\n    return instance.delete(`messages/${id}/dialog/${dialog_id}/`,{\n      headers: {authorize: token, id}\n    }).then(res => res.data);\n  },\n  sendMessage (options) {\n    let {id, token, user_id, message} = options;\n    return instance.post(`messages/${id}/send/${user_id}`, \n      {message},\n      {\n        headers: {authorize: token, id}\n      }).then(res => res.data);\n  },\n  readMessages (options) {\n    let {id, token, dialog_id, messages} = options;\n    return instance.put(`messages/${id}/read/${dialog_id}`,\n      {messages},\n      {\n        headers: {authorize: token, id}\n      }).then(res => res.data);\n  }\n\n};\n\n"]},"metadata":{},"sourceType":"module"}