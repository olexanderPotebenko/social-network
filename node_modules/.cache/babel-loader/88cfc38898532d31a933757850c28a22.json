{"ast":null,"code":"export const nameNor = value => {\n  value = value.replace(/[^a-z]/i, '');\n  value = value.slice(0, 20);\n  return value && value[0].toUpperCase() + value.slice(1).toLowerCase();\n};\nexport const phoneNumberNor = value => {\n  let onlyNums = value.replace(/[^\\d]/g, '');\n  console.log(onlyNums);\n  if (onlyNums.length < 1) return '';\n  if (onlyNums.length < 3) return '+' + onlyNums;\n  if (onlyNums.length < 6) return '+' + onlyNums.slice(0, 2) + '(' + onlyNums.slice(2);\n  return `+${onlyNums.slice(0, 2)}(${onlyNums.slice(2, 5)})${onlyNums.slice(5, 12)}`;\n};","map":{"version":3,"sources":["/root/Documents/projects/social-network/src/utils/fieldNormalizators.js"],"names":["nameNor","value","replace","slice","toUpperCase","toLowerCase","phoneNumberNor","onlyNums","console","log","length"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAGC,KAAK,IAAI;AAC9BA,EAAAA,KAAK,GAAGA,KAAK,CAACC,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAAR;AACAD,EAAAA,KAAK,GAAGA,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAe,EAAf,CAAR;AACA,SAAOF,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,CAASG,WAAT,KAAyBH,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAeE,WAAf,EAAzC;AACD,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAGL,KAAK,IAAI;AACrC,MAAIM,QAAQ,GAAGN,KAAK,CAACC,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAf;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,MAAGA,QAAQ,CAACG,MAAT,GAAkB,CAArB,EAAwB,OAAO,EAAP;AACxB,MAAGH,QAAQ,CAACG,MAAT,GAAkB,CAArB,EAAwB,OAAO,MAAMH,QAAb;AACxB,MAAGA,QAAQ,CAACG,MAAT,GAAkB,CAArB,EAAwB,OAAO,MAAMH,QAAQ,CAACJ,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAN,GAA6B,GAA7B,GAAmCI,QAAQ,CAACJ,KAAT,CAAe,CAAf,CAA1C;AACxB,SAAQ,IAAGI,QAAQ,CAACJ,KAAT,CAAe,CAAf,EAAiB,CAAjB,CAAoB,IAAGI,QAAQ,CAACJ,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAqB,IAAGI,QAAQ,CAACJ,KAAT,CAAe,CAAf,EAAiB,EAAjB,CAAqB,EAA/E;AACD,CAPM","sourcesContent":["export const nameNor = value => {\n  value = value.replace(/[^a-z]/i, '');\n  value = value.slice(0, 20);\n  return value && value[0].toUpperCase() + value.slice(1).toLowerCase();\n}\n\nexport const phoneNumberNor = value => {\n  let onlyNums = value.replace(/[^\\d]/g, '');\n  console.log(onlyNums);\n  if(onlyNums.length < 1) return '';\n  if(onlyNums.length < 3) return '+' + onlyNums;\n  if(onlyNums.length < 6) return '+' + onlyNums.slice(0, 2) + '(' + onlyNums.slice(2);\n  return `+${onlyNums.slice(0,2)}(${onlyNums.slice(2, 5)})${onlyNums.slice(5,12)}`;\n}\n\n"]},"metadata":{},"sourceType":"module"}