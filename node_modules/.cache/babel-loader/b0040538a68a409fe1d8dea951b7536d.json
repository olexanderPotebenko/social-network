{"ast":null,"code":"var _jsxFileName = \"/root/Documents/projects/social-network/src/components/Messages/Messages.jsx\";\nimport React from 'react';\nimport styles from './Messages.module.css';\nimport avatar_default from '../../assets/images/avatar_default.png';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter, Route, NavLink } from 'react-router-dom'; //hoocs\n\nimport WithSignInRedirect from '../../hocs/WithSignInRedirect.jsx';\nimport WithAuthData from '../../hocs/WithAuthData.jsx'; //components\n\nimport FetchingToggle from '../commons/FetchingToggle/FetchingToggle';\nimport ListIsEmpty from '../commons/ListIsEmpty/ListIsEmpty.jsx';\nimport Dialog from './Dialog/Dialog'; //reducers\n\nimport { getDialogs, sendMessage, selectDialog } from '../../reducers/messagesReducer'; //utils\n\nimport { getFormatedDate } from '../../utils/functions.js';\n\nclass Messages extends React.Component {\n  componentDidMount() {\n    let options = {\n      id: this.props.auth.id,\n      token: this.props.auth.token\n    };\n    this.props.getDialogs(options);\n  }\n\n  render() {\n    if (this.props.currentDialog && this.props.history.location.pathname.split('/').filter(rout => rout != '')[0] == 'messages' && !this.props.history.location.pathname.split('/').includes('dialog')) {\n      this.props.history.push(this.props.history.location.pathname + `dialog/${this.props.currentDialog}/`);\n    } // в компонене Messages будут отображаться только существующие диалоги, создать новый невозможно\n\n\n    let dialogs = this.props.dialogs;\n\n    if (dialogs.length > 0) {\n      dialogs = dialogs.sort((d1, d2) => d2.dateLastModified - d1.dateLastModified).map(dialog => /*#__PURE__*/React.createElement(DialogItem, {\n        dialog: dialog,\n        auth: this.props.auth,\n        selectDialog: this.props.selectDialog.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.wrp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, this.props.currentDialog ? /*#__PURE__*/React.createElement(Route, {\n      component: Dialog,\n      path: `/messages/:id/dialog/:dialog_id/`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }) : this.props.dialogsIsFetching && /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.fetching,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(FetchingToggle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    })) || (dialogs.length ? /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.scrollbar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, dialogs) : /*#__PURE__*/React.createElement(ListIsEmpty, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }\n    })));\n  }\n\n}\n\n;\n\nclass DialogItem extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      id: this.props.dialog.user_id,\n      photo: this.props.dialog.user_avatar,\n      load: false\n    };\n\n    this.onError = () => {\n      this.setState({\n        photo: avatar_default\n      });\n      this.setState({\n        load: true\n      });\n    };\n\n    this.onLoad = () => {\n      this.setState({\n        load: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    let dialog = this.props.dialog;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.dialog.user_avatar != this.props.dialog.user_avatar) {\n      this.setState({\n        photo: this.props.dialog.user_avatar\n      });\n    }\n\n    ;\n  }\n\n  render() {\n    let dialog = this.props.dialog;\n    let time = getFormatedDate(dialog.dateLastModified);\n    time = time.split(':');\n    if (time.length === 1) time = time[0];else time = time[0] + ':' + time[1] + time[2].slice(-3);\n    debugger;\n    let lastMessage = dialog.lastMessage ? dialog.lastMessage.text : 'massage list is empty..';\n    if (lastMessage.length > 50) lastMessage = lastMessage.slice(0, 50) + '...';\n    return /*#__PURE__*/React.createElement(NavLink, {\n      to: `/messages/${this.props.auth.id}/dialog/${dialog.dialog_id}/`,\n      className: styles['item-dialog'],\n      onClick: () => {\n        this.props.selectDialog(dialog.dialog_id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['container-left'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.avatar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, !this.state.load && /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.fetching,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(FetchingToggle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.photo,\n      onLoad: this.onLoad,\n      onError: this.onError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['container-right'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.time,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, time)), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        'text-decoration': 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }, dialog.user_name)), /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['last-message'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, dialog.lastMessage && !dialog.lastMessage.read && dialog.lastMessage.userId != this.props.auth.id && /*#__PURE__*/React.createElement(\"span\", {\n      className: styles['unread'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }\n    }, lastMessage) || /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 14\n      }\n    }, lastMessage))));\n  }\n\n}\n\nlet mapsStateToProps = state => {\n  return {\n    dialogsIsFetching: state.messagesPage.dialogsIsFetching,\n    dialogs: state.messagesPage.dialogs,\n    currentDialog: state.messagesPage.currentDialog\n  };\n};\n\nexport default compose(WithAuthData, WithSignInRedirect, connect(mapsStateToProps, {\n  getDialogs,\n  sendMessage,\n  selectDialog\n}))(withRouter(Messages));","map":{"version":3,"sources":["/root/Documents/projects/social-network/src/components/Messages/Messages.jsx"],"names":["React","styles","avatar_default","compose","connect","withRouter","Route","NavLink","WithSignInRedirect","WithAuthData","FetchingToggle","ListIsEmpty","Dialog","getDialogs","sendMessage","selectDialog","getFormatedDate","Messages","Component","componentDidMount","options","id","props","auth","token","render","currentDialog","history","location","pathname","split","filter","rout","includes","push","dialogs","length","sort","d1","d2","dateLastModified","map","dialog","bind","wrp","dialogsIsFetching","fetching","scrollbar","DialogItem","state","user_id","photo","user_avatar","load","onError","setState","onLoad","componentDidUpdate","prevProps","time","slice","lastMessage","text","dialog_id","avatar","name","user_name","read","userId","mapsStateToProps","messagesPage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './Messages.module.css';\nimport avatar_default from '../../assets/images/avatar_default.png';\n\nimport {compose} from 'redux';\nimport {connect} from 'react-redux';\nimport {withRouter, Route, NavLink} from 'react-router-dom';\n//hoocs\nimport WithSignInRedirect from '../../hocs/WithSignInRedirect.jsx';\nimport WithAuthData from '../../hocs/WithAuthData.jsx';\n//components\nimport FetchingToggle from '../commons/FetchingToggle/FetchingToggle';\nimport ListIsEmpty from '../commons/ListIsEmpty/ListIsEmpty.jsx';\nimport Dialog from './Dialog/Dialog'\n//reducers\nimport {getDialogs, sendMessage, selectDialog} from '../../reducers/messagesReducer';\n//utils\nimport {getFormatedDate} from '../../utils/functions.js';\n\nclass Messages extends React.Component {\n\n  componentDidMount() {\n    let options = {\n      id: this.props.auth.id,\n      token: this.props.auth.token,\n    };\n    this.props.getDialogs(options);\n\n  }\n\n  render() {\n    if (this.props.currentDialog &&\n      this.props.history.location.pathname.split('/').filter(rout => rout != '')[0] == 'messages' &&\n      !this.props.history.location.pathname.split('/').includes('dialog') ) {\n      this.props.history\n        .push(this.props.history.location.pathname + `dialog/${this.props.currentDialog}/`);\n    }\n    // в компонене Messages будут отображаться только существующие диалоги, создать новый невозможно\n\n    let dialogs = this.props.dialogs;\n    if(dialogs.length > 0) {\n      dialogs = dialogs.sort( (d1, d2) => d2.dateLastModified - d1.dateLastModified)\n        .map(dialog => \n          <DialogItem dialog={dialog} auth={this.props.auth} \n            selectDialog={this.props.selectDialog.bind(this)}/>);\n    }\n    return (\n      <div className={styles.wrp}>\n        {\n          this.props.currentDialog ? \n            <Route component={Dialog} path={`/messages/:id/dialog/:dialog_id/`} /> :\n          this.props.dialogsIsFetching\n          && <div className={styles.fetching}>\n            <FetchingToggle />\n          </div>\n          || (dialogs.length?\n            <div className={styles.scrollbar}>\n              {dialogs}\n            </div>:\n              <ListIsEmpty />\n          )\n        }\n      </div>\n    );\n  };\n};\n\nclass DialogItem extends React.Component {\n\n  state = {\n    id: this.props.dialog.user_id,\n    photo: this.props.dialog.user_avatar,\n    load: false,\n  }\n\n  componentDidMount() {\n    let dialog = this.props.dialog;\n  }\n  componentDidUpdate(prevProps) {\n    if(prevProps.dialog.user_avatar != this.props.dialog.user_avatar) {\n      this.setState({photo: this.props.dialog.user_avatar});\n    };\n  }\n\n  onError = () => {\n    this.setState({photo: avatar_default});\n    this.setState({load: true});\n  }\n\n  onLoad = () => {\n    this.setState({load: true});\n  }\n\n  render() {\n    let dialog = this.props.dialog;\n\n    let time = getFormatedDate(dialog.dateLastModified);\n    time = time.split(':');    \n    if(time.length === 1) time = time[0];\n    else time = time[0] + ':' + time[1] + time[2].slice(-3);\n\n    debugger;\n    let lastMessage = dialog.lastMessage? dialog.lastMessage.text: 'massage list is empty..';\n    if(lastMessage.length > 50) lastMessage = lastMessage.slice(0, 50) + '...';\n    return <NavLink to={`/messages/${this.props.auth.id}/dialog/${dialog.dialog_id}/`}\n      className={styles['item-dialog']}\n      onClick={() => {this.props.selectDialog(dialog.dialog_id);} }>\n      <div className={styles['container-left']} >\n        <div className={styles.avatar}>\n          { !this.state.load\n              && <div className={styles.fetching}>\n          <FetchingToggle />\n        </div>\n        }\n        <img src={this.state.photo} \n          onLoad={this.onLoad}\n          onError={this.onError} />\n      </div>\n\n    </div>\n      <div className={styles['container-right']}>\n        <div>\n          <div className={styles.time}>\n            {time}\n          </div>\n        </div>\n        <div className={styles.name}>\n          <h3 style={ {\n            'text-decoration': 'none',\n            } }>\n            {dialog.user_name}\n          </h3>\n        </div>\n        <div className={styles['last-message']}>\n          {\n            dialog.lastMessage && !dialog.lastMessage.read && \n              dialog.lastMessage.userId != this.props.auth.id\n              &&\n              <span className={styles['unread']}>\n          {lastMessage}\n        </span>\n          || <span>\n            {lastMessage}\n          </span>\n          }\n      </div>\n      </div>\n      </NavLink>\n  }\n}\n\nlet mapsStateToProps = state => {\n  return {\n    dialogsIsFetching: state.messagesPage.dialogsIsFetching,\n    dialogs: state.messagesPage.dialogs,\n    currentDialog: state.messagesPage.currentDialog,\n  };\n};\n\nexport default compose(\n  WithAuthData,\n  WithSignInRedirect,\n  connect(mapsStateToProps, {getDialogs, sendMessage, selectDialog}),\n)(withRouter(Messages));\n"]},"metadata":{},"sourceType":"module"}