{"ast":null,"code":"import { messageApi } from '../api/api';\nexport const ADD_NEW_TEXT_MESSAGE = 'ADD-NEW-TEXT-MESSAGE';\nexport const ADD_NEW_MESSAGE = 'ADD-NEW-MESSAGE';\nexport const SET_IS_FETCHING = 'SET-IS-FETCHING';\nexport const SET_DIALOGS = 'SET-DIALOGS';\nlet initial_state = {\n  isFetching: true,\n  currentDialog: '',\n  newMessage: 0,\n  dialogs: []\n};\n\nlet messagesReducer = (state = initial_state, action) => {\n  switch (action.type) {\n    case SET_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case SET_DIALOGS:\n      return { ...state,\n        dialogs: action.dialogs\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nconst setIsFetching = isFetching => ({\n  type: SET_IS_FETCHING,\n  isFetching\n});\n\nconst setDialogsActionCreator = dialogs => ({\n  type: SET_DIALOGS,\n  dialogs\n});\n\nexport const getDialogs = options => dispatch => {\n  dispatch(setIsFetching(true));\n  messageApi.getDialogs(options).then(data => {\n    debugger;\n\n    if (data.result_code == 0) {\n      debugger;\n      dispatch(setDialogsActionCreator(data.dialogs));\n    } else {}\n\n    ;\n    dispatch(setIsFetching(false));\n  });\n};\nexport const sendMessage = options => dispatch => {\n  alert('CREATE DIALOG');\n  messageApi.sendMessage(options).then(data => {\n    if (data.result_code == 0) {\n      debugger;\n      dispatch(getDialogs(options));\n    } else {\n      alert(data.result_code);\n    }\n  });\n};\nexport default messagesReducer;","map":{"version":3,"sources":["/home/i/Documents/projects/social-network/src/reducers/messagesReducer.js"],"names":["messageApi","ADD_NEW_TEXT_MESSAGE","ADD_NEW_MESSAGE","SET_IS_FETCHING","SET_DIALOGS","initial_state","isFetching","currentDialog","newMessage","dialogs","messagesReducer","state","action","type","setIsFetching","setDialogsActionCreator","getDialogs","options","dispatch","then","data","result_code","sendMessage","alert"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,YAAzB;AAEA,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,IAAIC,aAAa,GAAG;AAClBC,EAAAA,UAAU,EAAE,IADM;AAElBC,EAAAA,aAAa,EAAE,EAFG;AAGlBC,EAAAA,UAAU,EAAE,CAHM;AAIlBC,EAAAA,OAAO,EAAE;AAJS,CAApB;;AAOA,IAAIC,eAAe,GAAG,CAACC,KAAK,GAAGN,aAAT,EAAwBO,MAAxB,KAAmC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,eAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELL,QAAAA,UAAU,EAAEM,MAAM,CAACN;AAFd,OAAP;;AAIF,SAAKF,WAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELF,QAAAA,OAAO,EAAEG,MAAM,CAACH;AAFX,OAAP;;AAIF;AAAS,aAAOE,KAAP;AAXX;;AAYC;AACF,CAdD;;AAgBA,MAAMG,aAAa,GAAGR,UAAU,KAAK;AAACO,EAAAA,IAAI,EAAEV,eAAP;AAAwBG,EAAAA;AAAxB,CAAL,CAAhC;;AAEA,MAAMS,uBAAuB,GAAGN,OAAO,KAAK;AAACI,EAAAA,IAAI,EAAET,WAAP;AAAoBK,EAAAA;AAApB,CAAL,CAAvC;;AAEA,OAAO,MAAMO,UAAU,GAAGC,OAAO,IAAIC,QAAQ,IAAI;AAC/CA,EAAAA,QAAQ,CAACJ,aAAa,CAAC,IAAD,CAAd,CAAR;AACAd,EAAAA,UAAU,CAACgB,UAAX,CAAsBC,OAAtB,EACGE,IADH,CACQC,IAAI,IAAI;AACZ;;AACA,QAAGA,IAAI,CAACC,WAAL,IAAoB,CAAvB,EAAyB;AACzB;AACEH,MAAAA,QAAQ,CAACH,uBAAuB,CAACK,IAAI,CAACX,OAAN,CAAxB,CAAR;AACD,KAHD,MAGK,CACJ;;AAAA;AACDS,IAAAA,QAAQ,CAACJ,aAAa,CAAC,KAAD,CAAd,CAAR;AACD,GATH;AAUD,CAZM;AAcP,OAAO,MAAMQ,WAAW,GAAGL,OAAO,IAAIC,QAAQ,IAAI;AAChDK,EAAAA,KAAK,CAAC,eAAD,CAAL;AACAvB,EAAAA,UAAU,CAACsB,WAAX,CAAuBL,OAAvB,EACGE,IADH,CACQC,IAAI,IAAI;AACZ,QAAGA,IAAI,CAACC,WAAL,IAAoB,CAAvB,EAAyB;AACvB;AACAH,MAAAA,QAAQ,CAACF,UAAU,CAACC,OAAD,CAAX,CAAR;AACD,KAHD,MAGK;AACHM,MAAAA,KAAK,CAACH,IAAI,CAACC,WAAN,CAAL;AACD;AACF,GARH;AASD,CAXM;AAaP,eAAeX,eAAf","sourcesContent":["import {messageApi} from '../api/api';\n\nexport const ADD_NEW_TEXT_MESSAGE = 'ADD-NEW-TEXT-MESSAGE';\nexport const ADD_NEW_MESSAGE = 'ADD-NEW-MESSAGE';\nexport const SET_IS_FETCHING = 'SET-IS-FETCHING';\nexport const SET_DIALOGS = 'SET-DIALOGS';\n\nlet initial_state = {\n  isFetching: true,\n  currentDialog: '',\n  newMessage: 0,\n  dialogs: [],\n};\n\nlet messagesReducer = (state = initial_state, action) => {\n  switch (action.type) {\n    case SET_IS_FETCHING: \n      return {\n        ...state, \n        isFetching: action.isFetching,\n      };\n    case SET_DIALOGS: \n      return {\n        ...state,\n        dialogs: action.dialogs,\n      };\n    default: return state;\n  };\n};\n\nconst setIsFetching = isFetching => ({type: SET_IS_FETCHING, isFetching});\n\nconst setDialogsActionCreator = dialogs => ({type: SET_DIALOGS, dialogs});\n\nexport const getDialogs = options => dispatch => {\n  dispatch(setIsFetching(true));\n  messageApi.getDialogs(options)\n    .then(data => {\n      debugger;\n      if(data.result_code == 0){\n      debugger;\n        dispatch(setDialogsActionCreator(data.dialogs) );\n      }else{\n      };\n      dispatch(setIsFetching(false));\n    });\n}\n\nexport const sendMessage = options => dispatch => {\n  alert('CREATE DIALOG');\n  messageApi.sendMessage(options)\n    .then(data => {\n      if(data.result_code == 0){\n        debugger;\n        dispatch(getDialogs(options));\n      }else{\n        alert(data.result_code);\n      }\n    });\n};\n\nexport default messagesReducer;\n\n"]},"metadata":{},"sourceType":"module"}