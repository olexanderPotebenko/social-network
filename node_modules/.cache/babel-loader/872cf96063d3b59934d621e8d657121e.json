{"ast":null,"code":"import { SET_AUTH_DATA, WS_FOLLOW, setWsActionCreator } from '../reducers/authReducer.js';\nimport { WS_MESSAGE, READ_MESSAGES, getDialog, getDialogs, getDialogsWithoutToggle } from '../reducers/messagesReducer.js';\nimport { SEND_YOU_MESSAGE, FOLLOW_YOU, LIKE_YOUR_POST, addNotification } from '../reducers/notifi.js';\nimport { SET_LIKES_POST } from '../reducers/profileReducer.js';\nimport { host } from '../api/api.js';\nconst SEND_MESSAGE = 'SEND-MESSAGE';\n\nconst ws = store => next => action => {\n  let result = next(action);\n  let state = store.getState();\n\n  const startWebSocketConnection = () => {\n    let ws = new WebSocket(`ws://${host}:8181`);\n\n    ws.onopen = e => {\n      store.dispatch(setWsActionCreator(ws));\n      ws.send(JSON.stringify({\n        token: state.auth.token,\n        id: state.auth.id,\n        action: 'AUTH'\n      }));\n    };\n\n    ws.onclose = event => {\n      if (event.wasClean) {\n        alert(`[close] Соединение закрыто чисто, код=${event.code} причина=${event.reason}`);\n      } else {\n        setTimeout(startWebSocketConnection(), 2000);\n      }\n    };\n\n    ws.onmessage = event => {\n      state = store.getState(); //console.log(event);\n\n      debuger;\n      let data = JSON.parse(event.data); //console.log(data);\n      //let {id, token, dialog_id} = options;\n      //alert(`[message] Данные получены с сервера: ${event.data}`);\n\n      let options = {};\n\n      switch (data.action) {\n        case SEND_MESSAGE:\n          //console.log(state);\n          options = {\n            id: state.auth.id,\n            token: state.auth.token\n          }; //aaaa\n\n          if (state.messagesPage.dialogs.find(dialog => dialog.user_id == data.id)) {\n            let url = document.location.href;\n\n            if (Object.keys(state.messagesPage.dialog).length && ~url.lastIndexOf(state.messagesPage.dialog.dialog_id) && state.messagesPage.dialog.user_id === data.id) {\n              let dialog_id = state.messagesPage.dialogs.find(dialog => dialog.user_id == data.id).dialog_id;\n              options.dialog_id = dialog_id;\n              store.dispatch(getDialog(options));\n            } else {\n              //let {id, token, user_id} = options;\n              //data.id, SEND_YOU_MESSAGE\n              options = {\n                id: state.auth.id,\n                token: state.auth.token,\n                user_id: data.id\n              };\n              store.dispatch(addNotification(options, SEND_YOU_MESSAGE));\n            }\n\n            store.dispatch(getDialogsWithoutToggle(options));\n          } else {\n            store.dispatch(getDialogs(options)).then(res => {\n              state = store.getState();\n              let dialog_id = state.messagesPage.dialogs.find(dialog => dialog.user_id == data.id).dialog_id;\n              options.dialog_id = dialog_id;\n              store.dispatch(getDialog(options));\n            });\n          }\n\n          break;\n\n        case READ_MESSAGES:\n          //alert('new mess');\n          if (state.messagesPage.dialog.dialog_id === data.dialog_id) {\n            options = {\n              id: state.auth.id,\n              token: state.auth.token,\n              dialog_id: data.dialog_id\n            };\n            store.dispatch(getDialog(options));\n          }\n\n          ;\n          break;\n\n        case WS_FOLLOW:\n          options = {\n            id: state.auth.id,\n            token: state.auth.token,\n            user_id: data.id\n          };\n          store.dispatch(addNotification(options, FOLLOW_YOU));\n          break;\n\n        case SET_LIKES_POST:\n          options = {\n            id: state.auth.id,\n            token: state.auth.token,\n            user_id: data.id\n          };\n          store.dispatch(addNotification(options, LIKE_YOUR_POST));\n          break;\n      }\n\n      ;\n    };\n  };\n\n  let data = '';\n  let user_id = '';\n\n  switch (action.type) {\n    case SET_AUTH_DATA:\n      //console.log(SET_AUTH_DATA);\n      startWebSocketConnection();\n      break;\n\n    case WS_MESSAGE:\n      data = JSON.stringify({\n        id: state.auth.id,\n        action: 'SEND-MESSAGE',\n        user_id: action.user_id\n      });\n      state.auth.ws.send(data);\n      break;\n\n    case READ_MESSAGES:\n      data = JSON.stringify({\n        id: state.auth.id,\n        action: READ_MESSAGES,\n        user_id: state.messagesPage.dialog.user_id,\n        dialog_id: state.messagesPage.currentDialog\n      });\n      state.auth.ws.send(data);\n      break;\n\n    case WS_FOLLOW:\n      data = JSON.stringify({\n        id: state.auth.id,\n        action: action.type,\n        user_id: action.user_id\n      });\n      state.auth.ws.send(data);\n      break;\n\n    case SET_LIKES_POST:\n      let routs = action.post.picture.split('/').filter(rout => rout != '');\n      user_id = routs[routs.indexOf('profile') + 1];\n\n      if (user_id != state.auth.id && action.post.likes.includes(state.auth.id)) {\n        data = JSON.stringify({\n          id: state.auth.id,\n          action: action.type,\n          user_id,\n          post_id: action.post.id\n        });\n        state.auth.ws.send(data);\n      }\n\n      break;\n  }\n\n  return result;\n};\n\nexport default ws;","map":{"version":3,"sources":["/root/Documents/projects/social-network/src/middleware/ws.js"],"names":["SET_AUTH_DATA","WS_FOLLOW","setWsActionCreator","WS_MESSAGE","READ_MESSAGES","getDialog","getDialogs","getDialogsWithoutToggle","SEND_YOU_MESSAGE","FOLLOW_YOU","LIKE_YOUR_POST","addNotification","SET_LIKES_POST","host","SEND_MESSAGE","ws","store","next","action","result","state","getState","startWebSocketConnection","WebSocket","onopen","e","dispatch","send","JSON","stringify","token","auth","id","onclose","event","wasClean","alert","code","reason","setTimeout","onmessage","debuger","data","parse","options","messagesPage","dialogs","find","dialog","user_id","url","document","location","href","Object","keys","length","lastIndexOf","dialog_id","then","res","type","currentDialog","routs","post","picture","split","filter","rout","indexOf","likes","includes","post_id"],"mappings":"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","sourcesContent":["import {SET_AUTH_DATA, WS_FOLLOW, setWsActionCreator} from '../reducers/authReducer.js';\nimport {WS_MESSAGE, READ_MESSAGES, getDialog, getDialogs, getDialogsWithoutToggle} from '../reducers/messagesReducer.js';\nimport {SEND_YOU_MESSAGE, FOLLOW_YOU, LIKE_YOUR_POST, addNotification} from '../reducers/notifi.js';\nimport {SET_LIKES_POST} from '../reducers/profileReducer.js';\nimport {host} from '../api/api.js';\n\nconst SEND_MESSAGE = 'SEND-MESSAGE';\n\n\nconst ws = store => next => action => {\n\n  let result = next(action);\n\n  let state = store.getState();\n\n  const startWebSocketConnection = () => {\n    let ws = new WebSocket(`ws://${host}:8181`);\n    ws.onopen = (e) => {\n      store.dispatch(setWsActionCreator(ws));\n      ws.send(JSON.stringify({\n        token: state.auth.token,\n        id: state.auth.id,\n        action: 'AUTH',\n      }));\n    };\n\n    ws.onclose = (event) => {\n      if (event.wasClean) {\n        alert(`[close] Соединение закрыто чисто, код=${event.code} причина=${event.reason}`);\n      } else {\n        setTimeout(startWebSocketConnection(), 2000);\n      }\n    };\n\n    ws.onmessage = (event) => {\n      state = store.getState();\n      //console.log(event);\n      debuger;\n      let data = JSON.parse(event.data);\n      //console.log(data);\n      //let {id, token, dialog_id} = options;\n      //alert(`[message] Данные получены с сервера: ${event.data}`);\n      let options = {};\n      switch(data.action) {\n        case SEND_MESSAGE:\n\n          //console.log(state);\n          options = {\n            id: state.auth.id,\n            token: state.auth.token,\n          };\n\n          //aaaa\n\n          if(state.messagesPage.dialogs.find(dialog => dialog.user_id == data.id)){\n            let url = document.location.href;\n            if( Object.keys(state.messagesPage.dialog).length\n              && ~url.lastIndexOf(state.messagesPage.dialog.dialog_id)\n              && state.messagesPage.dialog.user_id === data.id ) {\n\n              let dialog_id = state.messagesPage.dialogs\n                .find(dialog => dialog.user_id == data.id).dialog_id;\n              options.dialog_id = dialog_id;\n              store.dispatch(getDialog(options));\n\n            } else {\n              //let {id, token, user_id} = options;\n              //data.id, SEND_YOU_MESSAGE\n              options = {\n                id: state.auth.id,\n                token: state.auth.token,\n                user_id: data.id,\n              };\n              store.dispatch(addNotification(options, SEND_YOU_MESSAGE));\n            }\n            store.dispatch(getDialogsWithoutToggle(options))\n          } else {\n            store.dispatch(getDialogs(options))\n              .then(res => {\n                state = store.getState();\n                let dialog_id = state.messagesPage.dialogs\n                  .find(dialog => dialog.user_id == data.id).dialog_id;\n                options.dialog_id = dialog_id;\n                store.dispatch(getDialog(options));\n              });\n          }\n          break;\n        case READ_MESSAGES:\n          //alert('new mess');\n          if(state.messagesPage.dialog.dialog_id === data.dialog_id) {\n            options = {\n              id: state.auth.id,\n              token: state.auth.token,\n              dialog_id: data.dialog_id,\n            };\n            store.dispatch(getDialog(options));\n          };\n          break;\n        case WS_FOLLOW:\n          options = {\n            id: state.auth.id,\n            token: state.auth.token,\n            user_id: data.id,\n          };\n          store.dispatch(addNotification(options, FOLLOW_YOU));\n\n          break;\n        case SET_LIKES_POST:\n          options = {\n            id: state.auth.id,\n            token: state.auth.token,\n            user_id: data.id,\n          };\n          store.dispatch(addNotification(options, LIKE_YOUR_POST));\n\n          break;\n\n      };\n    };\n  }\n\n  let data = '';\n  let user_id = '';\n\n  switch(action.type) {\n    case SET_AUTH_DATA:\n      //console.log(SET_AUTH_DATA);\n      startWebSocketConnection();\n      break;\n    case WS_MESSAGE:\n      data = JSON.stringify({\n        id: state.auth.id,\n        action: 'SEND-MESSAGE',\n        user_id: action.user_id,\n      });\n      state.auth.ws.send(data);\n      break;\n    case READ_MESSAGES:\n      data = JSON.stringify({\n        id: state.auth.id,\n        action: READ_MESSAGES,\n        user_id: state.messagesPage.dialog.user_id,\n        dialog_id: state.messagesPage.currentDialog,\n      });\n      state.auth.ws.send(data);\n      break;\n    case WS_FOLLOW:\n      data = JSON.stringify({\n        id: state.auth.id,\n        action: action.type,\n        user_id: action.user_id,\n      });\n      state.auth.ws.send(data);\n      break;\n    case SET_LIKES_POST:\n      let routs = action.post.picture.split('/').filter(rout => rout != '');\n      user_id = routs[routs.indexOf('profile') + 1];\n      if(user_id != state.auth.id && action.post.likes.includes(state.auth.id)) {\n        data = JSON.stringify({\n          id: state.auth.id,\n          action: action.type,\n          user_id,\n          post_id: action.post.id,\n        });\n        state.auth.ws.send(data);\n      }\n      break;\n  }\n\n  return result;\n}\n\nexport default ws;\n"]},"metadata":{},"sourceType":"module"}