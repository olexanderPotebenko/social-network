{"ast":null,"code":"import * as axios from 'axios';\nconst instance = axios.create({\n  baseURL: 'http://127.0.0.1:8080/'\n});\nexport const userApi = {\n  getUsers(options) {\n    let {\n      id,\n      token,\n      page_size,\n      page_current\n    } = options;\n    return instance.get(`users/?page=${page_current}&count=${page_size}`, {\n      headers: id ? {\n        authorize: token,\n        id: id\n      } : {}\n    }).then(res => res.data);\n  }\n\n};\nexport const profileApi = {\n  getProfile(options) {\n    let {\n      id,\n      token,\n      user_id\n    } = options;\n    return instance.get(`profile/${user_id}`, {\n      headers: id ? {\n        authorize: token,\n        id: id\n      } : {}\n    }).then(res => res.data);\n  },\n\n  /*\n  getAvatar (options) {\n       let {user_id} = options;\n      return instance.get(`profile/${user_id}/avatar`)\n          .then(res => {\n              debugger;\n              return res.data \n          });\n  },\n  */\n  // posts\n  getPosts({\n    user_id,\n    count,\n    page\n  }) {\n    return instance.get(`profile/${user_id}/posts/?page=${page}&count=&{count}`).then(res => res.data);\n  },\n\n  getLikersPost({\n    user_id,\n    post_id\n  }) {\n    return instance.get(`likers/?user_id=${user_id}&post_id=${post_id}`).then(res => res.data);\n  },\n\n  createPost({\n    id,\n    token,\n    post\n  }) {\n    return instance.post(`profile/${id}/posts/`, post, {\n      headers: {\n        authorize: token,\n        id,\n        'Content-Type': 'form/multipart'\n      }\n    }).then(res => res.data);\n  },\n\n  likedPost({\n    id,\n    token,\n    user_id,\n    post_id\n  }) {\n    return instance.post(`profile/${user_id}/posts/${post_id}/like`, {}, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => res.data);\n  },\n\n  /*\n          id: this.props.auth.id,\n          user_id: this.props.profile.id,\n          token: this.props.auth.token,\n          post_id: this.props.post.id,\n          */\n  // delete\n  deletePost({\n    id,\n    token,\n    post_id\n  }) {\n    return instance.delete(`profile/${id}/posts/${post_id}`, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => {\n      console.log(res);\n      return {\n        post: {\n          id: post_id\n        },\n        result_code: 0\n      };\n    }, rej => {\n      console.log(rej);\n      return {\n        result_code: 1\n      };\n    });\n  },\n\n  // put \n  updateProfile({\n    id,\n    token,\n    formData\n  }) {\n    return instance.put(`profile/${id}/update`, formData, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => {\n      return res.data;\n    });\n  }\n\n};\nexport const authApi = {\n  signIn({\n    email,\n    password\n  }) {\n    return instance.post(`signin`, {\n      password,\n      email\n    }).then(res => {\n      return res.data;\n    });\n  },\n\n  signUp({\n    email,\n    password,\n    first_name,\n    last_name\n  }) {\n    return instance.post(`signup`, {\n      email,\n      password,\n      first_name,\n      last_name\n    }).then(res => res.data);\n  }\n\n};\nexport const followApi = {\n  follow({\n    token,\n    id,\n    user_id\n  }) {\n    return instance.post(`follow/${user_id}`, {}, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => res.data);\n  },\n\n  unfollow({\n    token,\n    id,\n    user_id\n  }) {\n    return instance.delete(`follow/${user_id}/`, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => res.data);\n  }\n\n};\nexport const messageApi = {\n  getDialogs(options) {\n    let {\n      id,\n      token\n    } = options;\n    return instance.get(`messages/${id}/`, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => res.data);\n  },\n\n  createDialog(options) {\n    let {\n      id,\n      token,\n      user_id\n    } = options;\n    return instance.post(`messages/${id}/send/${user_id}`, {}, {\n      headers: {\n        authorize: token,\n        id\n      }\n    }).then(res => res.data);\n  }\n\n};","map":{"version":3,"sources":["/home/i/Documents/projects/social-network/src/api/api.js"],"names":["axios","instance","create","baseURL","userApi","getUsers","options","id","token","page_size","page_current","get","headers","authorize","then","res","data","profileApi","getProfile","user_id","getPosts","count","page","getLikersPost","post_id","createPost","post","likedPost","deletePost","delete","console","log","result_code","rej","updateProfile","formData","put","authApi","signIn","email","password","signUp","first_name","last_name","followApi","follow","unfollow","messageApi","getDialogs","createDialog"],"mappings":"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","sourcesContent":["import * as axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'http://127.0.0.1:8080/',\n});\n\nexport const userApi = {\n    getUsers(options) {\n\n        let {id, token, page_size, page_current} = options;\n        return instance.get(`users/?page=${page_current}&count=${page_size}`,\n            {\n                headers:  id ? { authorize: token, id: id }: {} ,\n            }).then(res => res.data);\n    },\n};\n\nexport const profileApi = {\n    getProfile (options) {\n\n        let {id, token, user_id} = options;\n        return instance.get(`profile/${user_id}`,\n            {\n                headers:  id ? { authorize: token, id: id }: {} ,\n            }).then(res => res.data);\n    },\n\n    /*\n    getAvatar (options) {\n\n        let {user_id} = options;\n        return instance.get(`profile/${user_id}/avatar`)\n            .then(res => {\n                debugger;\n                return res.data \n            });\n    },\n    */\n\n    // posts\n    getPosts ({user_id, count, page}) {\n        return instance.get(`profile/${user_id}/posts/?page=${page}&count=&{count}`)\n            .then(res => res.data);\n    },\n    getLikersPost ({user_id, post_id}) {\n        return instance.get(`likers/?user_id=${user_id}&post_id=${post_id}`)\n            .then(res => res.data);\n    },\n    createPost ({id, token, post}) {\n        return instance.post(`profile/${id}/posts/`,\n            post,\n            { headers: {authorize: token, id, 'Content-Type': 'form/multipart'}, }\n        )\n            .then( res =>  res.data );\n    },\n\n    likedPost ({id, token, user_id, post_id}) {\n        return instance.post(`profile/${user_id}/posts/${post_id}/like`,\n            {},\n            { headers: {authorize: token, id}, })\n            .then(res => res.data);\n    },\n    /*\n            id: this.props.auth.id,\n            user_id: this.props.profile.id,\n            token: this.props.auth.token,\n            post_id: this.props.post.id,\n            */\n    // delete\n    deletePost ({id, token, post_id}) {\n        return instance.delete(`profile/${id}/posts/${post_id}`,\n            { headers: {authorize: token, id}, })\n            .then(res => {\n                console.log(res);\n                return {post: {id: post_id}, result_code: 0};\n            },\n                rej => {\n                    console.log(rej);\n                    return {result_code: 1};\n                } \n            )\n    },\n    // put \n    updateProfile ({id, token, formData}) {\n        return instance.put(`profile/${id}/update`,\n            formData,\n            { headers: {authorize: token, id}, })\n            .then(res => {\n                return res.data;\n            });\n    },\n\n};\n\nexport const authApi = {\n    signIn ({email, password}) {\n\n        return instance.post(`signin`, {password, email} )\n            .then( res => {\n                return res.data });\n\n    },\n    signUp ({email, password, first_name, last_name}) {\n\n        return instance.post(`signup`, \n            {email, password, first_name, last_name})\n            .then( res => res.data );\n    },\n};\n\nexport const followApi = {\n    follow ({token, id, user_id}) {\n\n        return instance.post(`follow/${user_id}`, {},\n            { headers: {authorize: token, id} }\n        ).then( res => res.data );\n    },\n    unfollow ({token, id, user_id}) {\n\n        return instance.delete(`follow/${user_id}/`, \n            { headers: {authorize: token, id} }\n        ).then( res => res.data );\n    },\n\n};\n\nexport const messageApi = {\n    getDialogs (options) {\n        let {id, token} = options\n        return instance.get(`messages/${id}/`,\n            {\n                headers: {authorize: token, id}\n            }).then(res => res.data);\n    },\n    createDialog (options) {\n        let {id, token, user_id} = options;\n        return instance.post(`messages/${id}/send/${user_id}`, {},\n            {\n                headers: {authorize: token, id}\n            }).then(res => res.data);\n    },\n\n};\n\n"]},"metadata":{},"sourceType":"module"}