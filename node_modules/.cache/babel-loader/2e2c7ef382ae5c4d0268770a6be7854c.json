{"ast":null,"code":"var _jsxFileName = \"/root/Documents/projects/social-network/src/components/Profile/Posts/Posts.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { reduxForm, Field } from 'redux-form';\nimport styles from './Posts.module.css';\nimport default_avatar from '../../../assets/images/avatar_default.png';\nimport { getPosts, createPost } from '../../../reducers/profileReducer';\nimport Post from './Post/Post.jsx';\nimport { TextArea, Button } from '../../commons/FormsControls/FormsControls';\nimport Anchor from '../../commons/Anchor/Anchor';\nimport Modal from '../../commons/Modal/Modal';\nimport ListIsEmpty from '../../commons/ListIsEmpty/ListIsEmpty';\nimport CreatePost from './CreatePost/CreatePost';\nimport FetchingToggle from '../../commons/FetchingToggle/FetchingToggle.jsx';\n\nclass Posts extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      postedModal: false\n    };\n\n    this.onSubmit = post => {\n      this.changeVisibleModal(false);\n      let {\n        id,\n        token\n      } = this.props.auth;\n      let fd = new FormData();\n      fd.append('text', post.create_post);\n      fd.append('image', post.picture);\n      let options = {\n        id,\n        token,\n        post: fd\n      };\n      this.props.createPost(options);\n    };\n\n    this.changeVisibleModal = (bool => this.setState({\n      postedModal: bool\n    })).bind(this);\n  }\n\n  componentDidMount() {\n    let options = {\n      user_id: this.props.profile.id\n    };\n    this.props.getPosts(options);\n  }\n\n  componentWillUpdate() {\n    if (this.props.profile !== null) {\n      let route_profile = this.props.location.pathname.split('/').filter(item => item !== '')[1];\n      let current_profile = this.props.profile.id;\n\n      if (route_profile !== current_profile) {\n        let options = {\n          user_id: route_profile\n        };\n        this.props.getPosts(options);\n      }\n\n      ;\n    }\n\n    ;\n  }\n\n  render() {\n    let scrollbar = React.createRef();\n    let posts = [];\n\n    if (this.props.posts) {\n      posts = this.props.posts.map(item => {\n        return /*#__PURE__*/React.createElement(Post, {\n          avatar: default_avatar,\n          posts: this.props.posts,\n          post: item,\n          auth: this.props.auth,\n          scrollbar: scrollbar,\n          profile: this.props.profile,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }\n        });\n      });\n      posts.reverse();\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.wrp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        bottom: 0,\n        right: 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Anchor, {\n      scrollbar: scrollbar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    })), this.state.postedModal && /*#__PURE__*/React.createElement(Modal, {\n      width: 700,\n      height: 500,\n      Component: CreatePost,\n      changeVisibleModal: this.changeVisibleModal,\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 37\n      }\n    }), this.props.auth.id == this.props.profile.id && /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.create_post_button_wrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: styles.create_post_button,\n      onClick: () => {\n        this.changeVisibleModal(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, \"CREATE NEW POST\")), /*#__PURE__*/React.createElement(\"div\", {\n      ref: scrollbar,\n      className: styles.scrollbar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, this.props.postsIsFetching ? /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['fetching-wrp'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: styles['fetching'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FetchingToggle, {\n      width: 50,\n      height: 50,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }))) : posts.length > 0 && posts || /*#__PURE__*/React.createElement(ListIsEmpty, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 14\n      }\n    })));\n  }\n\n}\n\n;\n\nlet mapsStateToProps = state => ({\n  postsIsFetching: state.profilePage.postsIsFetching,\n  textNewPost: state.profilePage.textNewPost,\n  profile: state.profilePage.profile,\n  posts: state.profilePage.posts,\n  auth: state.auth\n});\n\nlet mapsDispatchToProps = {\n  getPosts,\n  createPost\n};\nexport default connect(mapsStateToProps, mapsDispatchToProps)(Posts);","map":{"version":3,"sources":["/root/Documents/projects/social-network/src/components/Profile/Posts/Posts.jsx"],"names":["React","connect","reduxForm","Field","styles","default_avatar","getPosts","createPost","Post","TextArea","Button","Anchor","Modal","ListIsEmpty","CreatePost","FetchingToggle","Posts","Component","state","postedModal","onSubmit","post","changeVisibleModal","id","token","props","auth","fd","FormData","append","create_post","picture","options","bool","setState","bind","componentDidMount","user_id","profile","componentWillUpdate","route_profile","location","pathname","split","filter","item","current_profile","render","scrollbar","createRef","posts","map","reverse","wrp","position","bottom","right","create_post_button_wrapper","create_post_button","postsIsFetching","length","mapsStateToProps","profilePage","textNewPost","mapsDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {reduxForm, Field} from 'redux-form';\n\nimport styles from './Posts.module.css';\nimport default_avatar from '../../../assets/images/avatar_default.png';\n\nimport {getPosts, createPost} from '../../../reducers/profileReducer';\nimport Post from './Post/Post.jsx';\n\nimport {TextArea, Button} from '../../commons/FormsControls/FormsControls';\nimport Anchor from '../../commons/Anchor/Anchor';\nimport Modal from '../../commons/Modal/Modal';\nimport ListIsEmpty from '../../commons/ListIsEmpty/ListIsEmpty';\nimport CreatePost from './CreatePost/CreatePost';\nimport FetchingToggle from '../../commons/FetchingToggle/FetchingToggle.jsx';\n\n\nclass Posts extends React.Component {\n\n  state = {\n    postedModal: false,\n  }\n\n  componentDidMount() {\n    let options = {\n      user_id: this.props.profile.id, \n    }\n    this.props.getPosts(options);\n  }\n\n  componentWillUpdate() {\n    if(this.props.profile !== null){\n      let route_profile = this.props.location.pathname\n        .split('/').filter(item => item !== '')[1];\n      let current_profile = this.props.profile.id;\n\n      if(route_profile !== current_profile) {\n\n        let options = {\n          user_id: route_profile, \n        }\n\n        this.props.getPosts(options);\n      };\n    };\n  }\n\n  onSubmit = (post) => {\n    this.changeVisibleModal(false);\n    let {id, token} = this.props.auth;\n    let fd = new FormData();\n    fd.append('text', post.create_post);\n    fd.append('image', post.picture);\n    let options = {\n      id, token,\n      post: fd,\n    }\n    this.props.createPost(options);\n  };\n\n  changeVisibleModal = ((bool) => this.setState({postedModal: bool})).bind(this);\n\n  render() {\n\n    let scrollbar = React.createRef();\n    let posts = [];\n    if(this.props.posts){\n      posts = this.props.posts.map( (item) =>  {\n        return (\n          <Post avatar={default_avatar} \n            posts={this.props.posts}\n            post={item} \n            auth={this.props.auth} \n            scrollbar={scrollbar}\n            profile={this.props.profile}></Post>\n        ) \n      }\n      );\n      posts.reverse();\n    }\n\n    return (\n      <div className={styles.wrp} >\n        <div style={ {position: 'absolute', bottom: 0, right: 30} }>\n          <Anchor scrollbar={scrollbar} />\n        </div>\n        {\n          this.state.postedModal && <Modal width={700} height={500} Component={CreatePost}\n        changeVisibleModal={ this.changeVisibleModal }\n        onSubmit={this.onSubmit} />\n        }\n      {\n        this.props.auth.id == this.props.profile.id &&\n          <div className={styles.create_post_button_wrapper}>\n            <button className={styles.create_post_button}\n              onClick={() => {this.changeVisibleModal(true)}} >\n              CREATE NEW POST\n            </button>\n          </div>\n      }\n      <div ref={scrollbar} className={styles.scrollbar}>\n\n        {\n          this.props.postsIsFetching? \n\n            <div className={styles['fetching-wrp']}>\n        <div className={styles['fetching']}>\n          <FetchingToggle width={50} height={50}/>\n        </div>\n      </div>\n          : posts.length > 0 && posts\n          || <ListIsEmpty />\n        }\n      </div>\n      </div>\n    );\n  }\n};\n\nlet mapsStateToProps = (state) => ({\n  postsIsFetching: state.profilePage.postsIsFetching,\n  textNewPost: state.profilePage.textNewPost,\n  profile: state.profilePage.profile,\n  posts: state.profilePage.posts,\n  auth: state.auth,\n});\n\nlet mapsDispatchToProps = {\n  getPosts,\n  createPost,\n};\n\n\nexport default connect(mapsStateToProps, mapsDispatchToProps)(Posts); \n\n\n"]},"metadata":{},"sourceType":"module"}